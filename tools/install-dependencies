#!/bin/bash

set -e

ROOT="$PWD"
PREFIX="${PREFIX:-$ROOT/build/local}"
echo "PREFIX: $PREFIX"

CMAKE=cmake
MAKE=make

# Load dependencies version
BASE_DIR=$(cd `dirname $0`; pwd)
source ${BASE_DIR}/dependencies-version
source ${BASE_DIR}/android-sdk

# Setup up folders
export PATH="$PREFIX/bin":$PATH
export LDFLAGS="-L$PREFIX/lib"
export LT_SYS_LIBRARY_PATH="$PREFIX/lib"
export DYLD_LIBRARY_PATH="$PREFIX/lib"
export LD_LIBRARY_PATH="$PREFIX/lib"
export LD_RUN_PATH="$PREFIX/lib"

function download_dependencies() {
    ${BASE_DIR}/download-dependencies $1
}

function build_gtest() {
    # Build gtest
    GTEST_DIR="$ROOT/build/local/src/gtest"
    cd ${GTEST_DIR}/googletest-release-$GTEST_VERSION
    $CMAKE -DCMAKE_INSTALL_PREFIX:PATH=$PREFIX -H.
    $MAKE -j4
    $MAKE install
    $MAKE clean
}

function build_libcheck() {
    # Build Check
    CHECK_DIR="$ROOT/build/local/src/check"
    cd ${CHECK_DIR}/check-$CHECK_VERSION
    $CMAKE -DCMAKE_INSTALL_PREFIX:PATH=$PREFIX -H.
    $MAKE -j4
    $MAKE install
    $MAKE clean
}

function build_protobuf() {
    # Build Protobuf
    PROTOBUF_DIR="$ROOT/build/local/src/protobuf"
    cd ${PROTOBUF_DIR}/protobuf-$PROTOBUF_VERSION

    ./configure --prefix="$PREFIX"
    $MAKE -j4
    $MAKE install

    # after install, cleanup to save space (docker)
    make clean
    "$PREFIX/bin/protoc" --version

    # Protobuf plugins
    cd "$ROOT/protobuf-plugin"
    $CMAKE -H. -Bbuild -DCMAKE_INSTALL_PREFIX=$PREFIX
    $MAKE -Cbuild -j12
    $MAKE -Cbuild install
    rm -rf build

    if [[ -x "$(command -v swift)" && `uname` == "Darwin" ]]; then
        build_swift_plugin
    fi
}

function build_swift_plugin() {
     # Download Swift Protobuf sources
    SWIFT_PROTOBUF_DIR="$ROOT/build/local/src/swift-protobuf"
    mkdir -p "$SWIFT_PROTOBUF_DIR"
    cd "$SWIFT_PROTOBUF_DIR"
    if [ ! -f $SWIFT_PROTOBUF_VERSION.tar.gz ]; then
        curl -fSsOL https://github.com/apple/swift-protobuf/archive/$SWIFT_PROTOBUF_VERSION.tar.gz
    fi
    tar xzf $SWIFT_PROTOBUF_VERSION.tar.gz

    # Build Swift Protobuf
    cd swift-protobuf-$SWIFT_PROTOBUF_VERSION
    swift build --static-swift-stdlib -c release
    cp -f "$SWIFT_PROTOBUF_DIR/swift-protobuf-$SWIFT_PROTOBUF_VERSION/.build/release/protoc-gen-swift" "$PREFIX/bin" | true
    $PREFIX/bin/protoc-gen-swift --version
}

# TODO make this better
function build_boost_for_android() {
    NDK_PATH=$(find_android_ndk_path)
    echo $NDK_PATH

    BOOST_DIR="$ROOT/build/local/src/Boost-for-Android"
    BOOST_TEMP_DIR="$BOOST_DIR/release"

    mkdir -p "$BOOST_TEMP_DIR"

    pushd $BOOST_DIR
    ./build-android.sh --prefix=$BOOST_TEMP_DIR --without-libraries=program_options,thread,atomic,chrono,filesystem,iostreams,json,log,python,random,regex,test,timer --arch=x86 $NDK_PATH
    popd

    mkdir -p "$PREFIX/include"
    mkdir -p "$PREFIX/lib"
    mv "$BOOST_TEMP_DIR/x86/include/boost-1_82/boost" "$PREFIX/include"
    cp -r "$BOOST_TEMP_DIR/x86/lib/" "$PREFIX/lib"
}

download_dependencies $1

build_gtest
build_libcheck
build_protobuf

if [[ "$1" == "android" ]]; then
    build_boost_for_android
fi

cd "$ROOT"
