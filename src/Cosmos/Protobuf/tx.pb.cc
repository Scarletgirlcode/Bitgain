// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tx.proto

#include "tx.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace cosmos {
namespace tx {
namespace v1beta1 {
constexpr Tx::Tx(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signatures_()
  , body_(nullptr)
  , auth_info_(nullptr){}
struct TxDefaultTypeInternal {
  constexpr TxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxDefaultTypeInternal() {}
  union {
    Tx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxDefaultTypeInternal _Tx_default_instance_;
constexpr TxRaw::TxRaw(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signatures_()
  , body_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_info_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TxRawDefaultTypeInternal {
  constexpr TxRawDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxRawDefaultTypeInternal() {}
  union {
    TxRaw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxRawDefaultTypeInternal _TxRaw_default_instance_;
constexpr SignDoc::SignDoc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : body_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_info_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_number_(uint64_t{0u}){}
struct SignDocDefaultTypeInternal {
  constexpr SignDocDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignDocDefaultTypeInternal() {}
  union {
    SignDoc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignDocDefaultTypeInternal _SignDoc_default_instance_;
constexpr TxBody::TxBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_()
  , extension_options_()
  , non_critical_extension_options_()
  , memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timeout_height_(uint64_t{0u}){}
struct TxBodyDefaultTypeInternal {
  constexpr TxBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TxBodyDefaultTypeInternal() {}
  union {
    TxBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TxBodyDefaultTypeInternal _TxBody_default_instance_;
constexpr AuthInfo::AuthInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signer_infos_()
  , fee_(nullptr)
  , tip_(nullptr){}
struct AuthInfoDefaultTypeInternal {
  constexpr AuthInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthInfoDefaultTypeInternal() {}
  union {
    AuthInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthInfoDefaultTypeInternal _AuthInfo_default_instance_;
constexpr SignerInfo::SignerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(nullptr)
  , mode_info_(nullptr)
  , sequence_(uint64_t{0u}){}
struct SignerInfoDefaultTypeInternal {
  constexpr SignerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignerInfoDefaultTypeInternal() {}
  union {
    SignerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignerInfoDefaultTypeInternal _SignerInfo_default_instance_;
constexpr ModeInfo_Single::ModeInfo_Single(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(0)
{}
struct ModeInfo_SingleDefaultTypeInternal {
  constexpr ModeInfo_SingleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModeInfo_SingleDefaultTypeInternal() {}
  union {
    ModeInfo_Single _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModeInfo_SingleDefaultTypeInternal _ModeInfo_Single_default_instance_;
constexpr ModeInfo_Multi::ModeInfo_Multi(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_infos_()
  , bitarray_(nullptr){}
struct ModeInfo_MultiDefaultTypeInternal {
  constexpr ModeInfo_MultiDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModeInfo_MultiDefaultTypeInternal() {}
  union {
    ModeInfo_Multi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModeInfo_MultiDefaultTypeInternal _ModeInfo_Multi_default_instance_;
constexpr ModeInfo::ModeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ModeInfoDefaultTypeInternal {
  constexpr ModeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModeInfoDefaultTypeInternal() {}
  union {
    ModeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModeInfoDefaultTypeInternal _ModeInfo_default_instance_;
constexpr Fee::Fee(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_()
  , payer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , granter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_limit_(uint64_t{0u}){}
struct FeeDefaultTypeInternal {
  constexpr FeeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeeDefaultTypeInternal() {}
  union {
    Fee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeeDefaultTypeInternal _Fee_default_instance_;
constexpr Tip::Tip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount_()
  , tipper_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TipDefaultTypeInternal {
  constexpr TipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TipDefaultTypeInternal() {}
  union {
    Tip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TipDefaultTypeInternal _Tip_default_instance_;
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tx_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tx_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tx_2eproto = nullptr;

const uint32_t TableStruct_tx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tx, body_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tx, auth_info_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tx, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxRaw, body_bytes_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxRaw, auth_info_bytes_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxRaw, signatures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDoc, body_bytes_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDoc, auth_info_bytes_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDoc, chain_id_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignDoc, account_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, messages_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, memo_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, timeout_height_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, extension_options_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::TxBody, non_critical_extension_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuthInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuthInfo, signer_infos_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuthInfo, fee_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::AuthInfo, tip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignerInfo, public_key_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignerInfo, mode_info_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::SignerInfo, sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo_Single, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo_Single, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo_Multi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo_Multi, bitarray_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo_Multi, mode_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::ModeInfo, sum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Fee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Fee, amount_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Fee, gas_limit_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Fee, payer_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Fee, granter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tip, amount_),
  PROTOBUF_FIELD_OFFSET(::cosmos::tx::v1beta1::Tip, tipper_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cosmos::tx::v1beta1::Tx)},
  { 9, -1, -1, sizeof(::cosmos::tx::v1beta1::TxRaw)},
  { 18, -1, -1, sizeof(::cosmos::tx::v1beta1::SignDoc)},
  { 28, -1, -1, sizeof(::cosmos::tx::v1beta1::TxBody)},
  { 39, -1, -1, sizeof(::cosmos::tx::v1beta1::AuthInfo)},
  { 48, -1, -1, sizeof(::cosmos::tx::v1beta1::SignerInfo)},
  { 57, -1, -1, sizeof(::cosmos::tx::v1beta1::ModeInfo_Single)},
  { 64, -1, -1, sizeof(::cosmos::tx::v1beta1::ModeInfo_Multi)},
  { 72, -1, -1, sizeof(::cosmos::tx::v1beta1::ModeInfo)},
  { 81, -1, -1, sizeof(::cosmos::tx::v1beta1::Fee)},
  { 91, -1, -1, sizeof(::cosmos::tx::v1beta1::Tip)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::tx::v1beta1::_Tx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::tx::v1beta1::_TxRaw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::tx::v1beta1::_SignDoc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::tx::v1beta1::_TxBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::tx::v1beta1::_AuthInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::tx::v1beta1::_SignerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::tx::v1beta1::_ModeInfo_Single_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::tx::v1beta1::_ModeInfo_Multi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::tx::v1beta1::_ModeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::tx::v1beta1::_Fee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cosmos::tx::v1beta1::_Tip_default_instance_),
};

const char descriptor_table_protodef_tx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010tx.proto\022\021cosmos.tx.v1beta1\032\ncoin.prot"
  "o\032\025crypto_multisig.proto\032\020tx_signing.pro"
  "to\032\031google/protobuf/any.proto\"q\n\002Tx\022\'\n\004b"
  "ody\030\001 \001(\0132\031.cosmos.tx.v1beta1.TxBody\022.\n\t"
  "auth_info\030\002 \001(\0132\033.cosmos.tx.v1beta1.Auth"
  "Info\022\022\n\nsignatures\030\003 \003(\014\"H\n\005TxRaw\022\022\n\nbod"
  "y_bytes\030\001 \001(\014\022\027\n\017auth_info_bytes\030\002 \001(\014\022\022"
  "\n\nsignatures\030\003 \003(\014\"`\n\007SignDoc\022\022\n\nbody_by"
  "tes\030\001 \001(\014\022\027\n\017auth_info_bytes\030\002 \001(\014\022\020\n\010ch"
  "ain_id\030\003 \001(\t\022\026\n\016account_number\030\004 \001(\004\"\307\001\n"
  "\006TxBody\022&\n\010messages\030\001 \003(\0132\024.google.proto"
  "buf.Any\022\014\n\004memo\030\002 \001(\t\022\026\n\016timeout_height\030"
  "\003 \001(\004\0220\n\021extension_options\030\377\007 \003(\0132\024.goog"
  "le.protobuf.Any\022=\n\036non_critical_extensio"
  "n_options\030\377\017 \003(\0132\024.google.protobuf.Any\"\211"
  "\001\n\010AuthInfo\0223\n\014signer_infos\030\001 \003(\0132\035.cosm"
  "os.tx.v1beta1.SignerInfo\022#\n\003fee\030\002 \001(\0132\026."
  "cosmos.tx.v1beta1.Fee\022#\n\003tip\030\003 \001(\0132\026.cos"
  "mos.tx.v1beta1.Tip\"x\n\nSignerInfo\022(\n\npubl"
  "ic_key\030\001 \001(\0132\024.google.protobuf.Any\022.\n\tmo"
  "de_info\030\002 \001(\0132\033.cosmos.tx.v1beta1.ModeIn"
  "fo\022\020\n\010sequence\030\003 \001(\004\"\253\002\n\010ModeInfo\0224\n\006sin"
  "gle\030\001 \001(\0132\".cosmos.tx.v1beta1.ModeInfo.S"
  "ingleH\000\0222\n\005multi\030\002 \001(\0132!.cosmos.tx.v1bet"
  "a1.ModeInfo.MultiH\000\0328\n\006Single\022.\n\004mode\030\001 "
  "\001(\0162 .cosmos.signing.v1beta1.SignMode\032t\n"
  "\005Multi\022:\n\010bitarray\030\001 \001(\0132(.cosmos.multis"
  "ig.v1beta1.CompactBitArray\022/\n\nmode_infos"
  "\030\002 \003(\0132\033.cosmos.tx.v1beta1.ModeInfoB\005\n\003s"
  "um\"c\n\003Fee\022)\n\006amount\030\001 \003(\0132\031.cosmos.base."
  "v1beta1.Coin\022\021\n\tgas_limit\030\002 \001(\004\022\r\n\005payer"
  "\030\003 \001(\t\022\017\n\007granter\030\004 \001(\t\"@\n\003Tip\022)\n\006amount"
  "\030\001 \003(\0132\031.cosmos.base.v1beta1.Coin\022\016\n\006tip"
  "per\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tx_2eproto_deps[4] = {
  &::descriptor_table_coin_2eproto,
  &::descriptor_table_crypto_5fmultisig_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_tx_5fsigning_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tx_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tx_2eproto = {
  false, false, 1337, descriptor_table_protodef_tx_2eproto, "tx.proto", 
  &descriptor_table_tx_2eproto_once, descriptor_table_tx_2eproto_deps, 4, 11,
  schemas, file_default_instances, TableStruct_tx_2eproto::offsets,
  file_level_metadata_tx_2eproto, file_level_enum_descriptors_tx_2eproto, file_level_service_descriptors_tx_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tx_2eproto_getter() {
  return &descriptor_table_tx_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tx_2eproto(&descriptor_table_tx_2eproto);
namespace cosmos {
namespace tx {
namespace v1beta1 {

// ===================================================================

class Tx::_Internal {
 public:
  static const ::cosmos::tx::v1beta1::TxBody& body(const Tx* msg);
  static const ::cosmos::tx::v1beta1::AuthInfo& auth_info(const Tx* msg);
};

const ::cosmos::tx::v1beta1::TxBody&
Tx::_Internal::body(const Tx* msg) {
  return *msg->body_;
}
const ::cosmos::tx::v1beta1::AuthInfo&
Tx::_Internal::auth_info(const Tx* msg) {
  return *msg->auth_info_;
}
Tx::Tx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  signatures_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.Tx)
}
Tx::Tx(const Tx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_body()) {
    body_ = new ::cosmos::tx::v1beta1::TxBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  if (from._internal_has_auth_info()) {
    auth_info_ = new ::cosmos::tx::v1beta1::AuthInfo(*from.auth_info_);
  } else {
    auth_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.Tx)
}

inline void Tx::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&body_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auth_info_) -
    reinterpret_cast<char*>(&body_)) + sizeof(auth_info_));
}

Tx::~Tx() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.Tx)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Tx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete body_;
  if (this != internal_default_instance()) delete auth_info_;
}

void Tx::ArenaDtor(void* object) {
  Tx* _this = reinterpret_cast< Tx* >(object);
  (void)_this;
}
void Tx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tx::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.Tx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  if (GetArenaForAllocation() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  if (GetArenaForAllocation() == nullptr && auth_info_ != nullptr) {
    delete auth_info_;
  }
  auth_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.tx.v1beta1.TxBody body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cosmos.tx.v1beta1.AuthInfo auth_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes signatures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.Tx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.tx.v1beta1.TxBody body = 1;
  if (this->_internal_has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::body(this), target, stream);
  }

  // .cosmos.tx.v1beta1.AuthInfo auth_info = 2;
  if (this->_internal_has_auth_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::auth_info(this), target, stream);
  }

  // repeated bytes signatures = 3;
  for (int i = 0, n = this->_internal_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_signatures(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.Tx)
  return target;
}

size_t Tx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.Tx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signatures = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signatures_.size());
  for (int i = 0, n = signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signatures_.Get(i));
  }

  // .cosmos.tx.v1beta1.TxBody body = 1;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  // .cosmos.tx.v1beta1.AuthInfo auth_info = 2;
  if (this->_internal_has_auth_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Tx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tx::GetClassData() const { return &_class_data_; }

void Tx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Tx *>(to)->MergeFrom(
      static_cast<const Tx &>(from));
}


void Tx::MergeFrom(const Tx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.Tx)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
  if (from._internal_has_body()) {
    _internal_mutable_body()->::cosmos::tx::v1beta1::TxBody::MergeFrom(from._internal_body());
  }
  if (from._internal_has_auth_info()) {
    _internal_mutable_auth_info()->::cosmos::tx::v1beta1::AuthInfo::MergeFrom(from._internal_auth_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tx::CopyFrom(const Tx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.Tx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tx::IsInitialized() const {
  return true;
}

void Tx::InternalSwap(Tx* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tx, auth_info_)
      + sizeof(Tx::auth_info_)
      - PROTOBUF_FIELD_OFFSET(Tx, body_)>(
          reinterpret_cast<char*>(&body_),
          reinterpret_cast<char*>(&other->body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tx::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tx_2eproto_getter, &descriptor_table_tx_2eproto_once,
      file_level_metadata_tx_2eproto[0]);
}

// ===================================================================

class TxRaw::_Internal {
 public:
};

TxRaw::TxRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  signatures_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxRaw)
}
TxRaw::TxRaw(const TxRaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  body_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body_bytes().empty()) {
    body_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body_bytes(), 
      GetArenaForAllocation());
  }
  auth_info_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_info_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_info_bytes().empty()) {
    auth_info_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_info_bytes(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxRaw)
}

inline void TxRaw::SharedCtor() {
body_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
auth_info_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_info_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxRaw::~TxRaw() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxRaw)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxRaw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  body_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_info_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TxRaw::ArenaDtor(void* object) {
  TxRaw* _this = reinterpret_cast< TxRaw* >(object);
  (void)_this;
}
void TxRaw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxRaw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  body_bytes_.ClearToEmpty();
  auth_info_bytes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxRaw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes body_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_body_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes auth_info_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_auth_info_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes signatures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_signatures();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxRaw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxRaw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes body_bytes = 1;
  if (!this->_internal_body_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_body_bytes(), target);
  }

  // bytes auth_info_bytes = 2;
  if (!this->_internal_auth_info_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_auth_info_bytes(), target);
  }

  // repeated bytes signatures = 3;
  for (int i = 0, n = this->_internal_signatures_size(); i < n; i++) {
    const auto& s = this->_internal_signatures(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxRaw)
  return target;
}

size_t TxRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxRaw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signatures = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(signatures_.size());
  for (int i = 0, n = signatures_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      signatures_.Get(i));
  }

  // bytes body_bytes = 1;
  if (!this->_internal_body_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body_bytes());
  }

  // bytes auth_info_bytes = 2;
  if (!this->_internal_auth_info_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_auth_info_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxRaw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxRaw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxRaw::GetClassData() const { return &_class_data_; }

void TxRaw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxRaw *>(to)->MergeFrom(
      static_cast<const TxRaw &>(from));
}


void TxRaw::MergeFrom(const TxRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxRaw)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
  if (!from._internal_body_bytes().empty()) {
    _internal_set_body_bytes(from._internal_body_bytes());
  }
  if (!from._internal_auth_info_bytes().empty()) {
    _internal_set_auth_info_bytes(from._internal_auth_info_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxRaw::CopyFrom(const TxRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxRaw::IsInitialized() const {
  return true;
}

void TxRaw::InternalSwap(TxRaw* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_bytes_, lhs_arena,
      &other->body_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_info_bytes_, lhs_arena,
      &other->auth_info_bytes_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TxRaw::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tx_2eproto_getter, &descriptor_table_tx_2eproto_once,
      file_level_metadata_tx_2eproto[1]);
}

// ===================================================================

class SignDoc::_Internal {
 public:
};

SignDoc::SignDoc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.SignDoc)
}
SignDoc::SignDoc(const SignDoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  body_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body_bytes().empty()) {
    body_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body_bytes(), 
      GetArenaForAllocation());
  }
  auth_info_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_info_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_info_bytes().empty()) {
    auth_info_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_info_bytes(), 
      GetArenaForAllocation());
  }
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  account_number_ = from.account_number_;
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.SignDoc)
}

inline void SignDoc::SharedCtor() {
body_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
auth_info_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_info_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chain_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
account_number_ = uint64_t{0u};
}

SignDoc::~SignDoc() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.SignDoc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignDoc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  body_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_info_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignDoc::ArenaDtor(void* object) {
  SignDoc* _this = reinterpret_cast< SignDoc* >(object);
  (void)_this;
}
void SignDoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignDoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.SignDoc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_bytes_.ClearToEmpty();
  auth_info_bytes_.ClearToEmpty();
  chain_id_.ClearToEmpty();
  account_number_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignDoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes body_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_body_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes auth_info_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_auth_info_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.tx.v1beta1.SignDoc.chain_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 account_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          account_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignDoc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.SignDoc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes body_bytes = 1;
  if (!this->_internal_body_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_body_bytes(), target);
  }

  // bytes auth_info_bytes = 2;
  if (!this->_internal_auth_info_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_auth_info_bytes(), target);
  }

  // string chain_id = 3;
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.tx.v1beta1.SignDoc.chain_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chain_id(), target);
  }

  // uint64 account_number = 4;
  if (this->_internal_account_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_account_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.SignDoc)
  return target;
}

size_t SignDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.SignDoc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body_bytes = 1;
  if (!this->_internal_body_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body_bytes());
  }

  // bytes auth_info_bytes = 2;
  if (!this->_internal_auth_info_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_auth_info_bytes());
  }

  // string chain_id = 3;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // uint64 account_number = 4;
  if (this->_internal_account_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_account_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignDoc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignDoc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignDoc::GetClassData() const { return &_class_data_; }

void SignDoc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignDoc *>(to)->MergeFrom(
      static_cast<const SignDoc &>(from));
}


void SignDoc::MergeFrom(const SignDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.SignDoc)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body_bytes().empty()) {
    _internal_set_body_bytes(from._internal_body_bytes());
  }
  if (!from._internal_auth_info_bytes().empty()) {
    _internal_set_auth_info_bytes(from._internal_auth_info_bytes());
  }
  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_account_number() != 0) {
    _internal_set_account_number(from._internal_account_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignDoc::CopyFrom(const SignDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.SignDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignDoc::IsInitialized() const {
  return true;
}

void SignDoc::InternalSwap(SignDoc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_bytes_, lhs_arena,
      &other->body_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_info_bytes_, lhs_arena,
      &other->auth_info_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, lhs_arena,
      &other->chain_id_, rhs_arena
  );
  swap(account_number_, other->account_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignDoc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tx_2eproto_getter, &descriptor_table_tx_2eproto_once,
      file_level_metadata_tx_2eproto[2]);
}

// ===================================================================

class TxBody::_Internal {
 public:
};

void TxBody::clear_messages() {
  messages_.Clear();
}
void TxBody::clear_extension_options() {
  extension_options_.Clear();
}
void TxBody::clear_non_critical_extension_options() {
  non_critical_extension_options_.Clear();
}
TxBody::TxBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messages_(arena),
  extension_options_(arena),
  non_critical_extension_options_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.TxBody)
}
TxBody::TxBody(const TxBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_),
      extension_options_(from.extension_options_),
      non_critical_extension_options_(from.non_critical_extension_options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  timeout_height_ = from.timeout_height_;
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.TxBody)
}

inline void TxBody::SharedCtor() {
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timeout_height_ = uint64_t{0u};
}

TxBody::~TxBody() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.TxBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TxBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TxBody::ArenaDtor(void* object) {
  TxBody* _this = reinterpret_cast< TxBody* >(object);
  (void)_this;
}
void TxBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TxBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TxBody::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.TxBody)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  extension_options_.Clear();
  non_critical_extension_options_.Clear();
  memo_.ClearToEmpty();
  timeout_height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string memo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.tx.v1beta1.TxBody.memo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timeout_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timeout_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any extension_options = 1023;
      case 1023:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_extension_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any non_critical_extension_options = 2047;
      case 2047:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_non_critical_extension_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16378>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxBody::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.TxBody)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  // string memo = 2;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.tx.v1beta1.TxBody.memo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_memo(), target);
  }

  // uint64 timeout_height = 3;
  if (this->_internal_timeout_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timeout_height(), target);
  }

  // repeated .google.protobuf.Any extension_options = 1023;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extension_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1023, this->_internal_extension_options(i), target, stream);
  }

  // repeated .google.protobuf.Any non_critical_extension_options = 2047;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_non_critical_extension_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2047, this->_internal_non_critical_extension_options(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.TxBody)
  return target;
}

size_t TxBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.TxBody)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any extension_options = 1023;
  total_size += 2UL * this->_internal_extension_options_size();
  for (const auto& msg : this->extension_options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any non_critical_extension_options = 2047;
  total_size += 2UL * this->_internal_non_critical_extension_options_size();
  for (const auto& msg : this->non_critical_extension_options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string memo = 2;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // uint64 timeout_height = 3;
  if (this->_internal_timeout_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timeout_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TxBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxBody::GetClassData() const { return &_class_data_; }

void TxBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TxBody *>(to)->MergeFrom(
      static_cast<const TxBody &>(from));
}


void TxBody::MergeFrom(const TxBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.TxBody)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  extension_options_.MergeFrom(from.extension_options_);
  non_critical_extension_options_.MergeFrom(from.non_critical_extension_options_);
  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (from._internal_timeout_height() != 0) {
    _internal_set_timeout_height(from._internal_timeout_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxBody::CopyFrom(const TxBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.TxBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxBody::IsInitialized() const {
  return true;
}

void TxBody::InternalSwap(TxBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
  extension_options_.InternalSwap(&other->extension_options_);
  non_critical_extension_options_.InternalSwap(&other->non_critical_extension_options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
  swap(timeout_height_, other->timeout_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tx_2eproto_getter, &descriptor_table_tx_2eproto_once,
      file_level_metadata_tx_2eproto[3]);
}

// ===================================================================

class AuthInfo::_Internal {
 public:
  static const ::cosmos::tx::v1beta1::Fee& fee(const AuthInfo* msg);
  static const ::cosmos::tx::v1beta1::Tip& tip(const AuthInfo* msg);
};

const ::cosmos::tx::v1beta1::Fee&
AuthInfo::_Internal::fee(const AuthInfo* msg) {
  return *msg->fee_;
}
const ::cosmos::tx::v1beta1::Tip&
AuthInfo::_Internal::tip(const AuthInfo* msg) {
  return *msg->tip_;
}
AuthInfo::AuthInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  signer_infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.AuthInfo)
}
AuthInfo::AuthInfo(const AuthInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signer_infos_(from.signer_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fee()) {
    fee_ = new ::cosmos::tx::v1beta1::Fee(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  if (from._internal_has_tip()) {
    tip_ = new ::cosmos::tx::v1beta1::Tip(*from.tip_);
  } else {
    tip_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.AuthInfo)
}

inline void AuthInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fee_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tip_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(tip_));
}

AuthInfo::~AuthInfo() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.AuthInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete fee_;
  if (this != internal_default_instance()) delete tip_;
}

void AuthInfo::ArenaDtor(void* object) {
  AuthInfo* _this = reinterpret_cast< AuthInfo* >(object);
  (void)_this;
}
void AuthInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.AuthInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signer_infos_.Clear();
  if (GetArenaForAllocation() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
  if (GetArenaForAllocation() == nullptr && tip_ != nullptr) {
    delete tip_;
  }
  tip_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signer_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .cosmos.tx.v1beta1.Fee fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cosmos.tx.v1beta1.Tip tip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.AuthInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signer_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_signer_infos(i), target, stream);
  }

  // .cosmos.tx.v1beta1.Fee fee = 2;
  if (this->_internal_has_fee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fee(this), target, stream);
  }

  // .cosmos.tx.v1beta1.Tip tip = 3;
  if (this->_internal_has_tip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tip(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.AuthInfo)
  return target;
}

size_t AuthInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.AuthInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1;
  total_size += 1UL * this->_internal_signer_infos_size();
  for (const auto& msg : this->signer_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.tx.v1beta1.Fee fee = 2;
  if (this->_internal_has_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_);
  }

  // .cosmos.tx.v1beta1.Tip tip = 3;
  if (this->_internal_has_tip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tip_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthInfo::GetClassData() const { return &_class_data_; }

void AuthInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthInfo *>(to)->MergeFrom(
      static_cast<const AuthInfo &>(from));
}


void AuthInfo::MergeFrom(const AuthInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.AuthInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  signer_infos_.MergeFrom(from.signer_infos_);
  if (from._internal_has_fee()) {
    _internal_mutable_fee()->::cosmos::tx::v1beta1::Fee::MergeFrom(from._internal_fee());
  }
  if (from._internal_has_tip()) {
    _internal_mutable_tip()->::cosmos::tx::v1beta1::Tip::MergeFrom(from._internal_tip());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthInfo::CopyFrom(const AuthInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.AuthInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthInfo::IsInitialized() const {
  return true;
}

void AuthInfo::InternalSwap(AuthInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  signer_infos_.InternalSwap(&other->signer_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthInfo, tip_)
      + sizeof(AuthInfo::tip_)
      - PROTOBUF_FIELD_OFFSET(AuthInfo, fee_)>(
          reinterpret_cast<char*>(&fee_),
          reinterpret_cast<char*>(&other->fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tx_2eproto_getter, &descriptor_table_tx_2eproto_once,
      file_level_metadata_tx_2eproto[4]);
}

// ===================================================================

class SignerInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& public_key(const SignerInfo* msg);
  static const ::cosmos::tx::v1beta1::ModeInfo& mode_info(const SignerInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
SignerInfo::_Internal::public_key(const SignerInfo* msg) {
  return *msg->public_key_;
}
const ::cosmos::tx::v1beta1::ModeInfo&
SignerInfo::_Internal::mode_info(const SignerInfo* msg) {
  return *msg->mode_info_;
}
void SignerInfo::clear_public_key() {
  if (GetArenaForAllocation() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
SignerInfo::SignerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.SignerInfo)
}
SignerInfo::SignerInfo(const SignerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_public_key()) {
    public_key_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  if (from._internal_has_mode_info()) {
    mode_info_ = new ::cosmos::tx::v1beta1::ModeInfo(*from.mode_info_);
  } else {
    mode_info_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.SignerInfo)
}

inline void SignerInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&public_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&public_key_)) + sizeof(sequence_));
}

SignerInfo::~SignerInfo() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.SignerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SignerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete public_key_;
  if (this != internal_default_instance()) delete mode_info_;
}

void SignerInfo::ArenaDtor(void* object) {
  SignerInfo* _this = reinterpret_cast< SignerInfo* >(object);
  (void)_this;
}
void SignerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.SignerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mode_info_ != nullptr) {
    delete mode_info_;
  }
  mode_info_ = nullptr;
  sequence_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cosmos.tx.v1beta1.ModeInfo mode_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.SignerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any public_key = 1;
  if (this->_internal_has_public_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_key(this), target, stream);
  }

  // .cosmos.tx.v1beta1.ModeInfo mode_info = 2;
  if (this->_internal_has_mode_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mode_info(this), target, stream);
  }

  // uint64 sequence = 3;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.SignerInfo)
  return target;
}

size_t SignerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.SignerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any public_key = 1;
  if (this->_internal_has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  // .cosmos.tx.v1beta1.ModeInfo mode_info = 2;
  if (this->_internal_has_mode_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mode_info_);
  }

  // uint64 sequence = 3;
  if (this->_internal_sequence() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignerInfo::GetClassData() const { return &_class_data_; }

void SignerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignerInfo *>(to)->MergeFrom(
      static_cast<const SignerInfo &>(from));
}


void SignerInfo::MergeFrom(const SignerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.SignerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_public_key()) {
    _internal_mutable_public_key()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_public_key());
  }
  if (from._internal_has_mode_info()) {
    _internal_mutable_mode_info()->::cosmos::tx::v1beta1::ModeInfo::MergeFrom(from._internal_mode_info());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignerInfo::CopyFrom(const SignerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.SignerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignerInfo::IsInitialized() const {
  return true;
}

void SignerInfo::InternalSwap(SignerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignerInfo, sequence_)
      + sizeof(SignerInfo::sequence_)
      - PROTOBUF_FIELD_OFFSET(SignerInfo, public_key_)>(
          reinterpret_cast<char*>(&public_key_),
          reinterpret_cast<char*>(&other->public_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tx_2eproto_getter, &descriptor_table_tx_2eproto_once,
      file_level_metadata_tx_2eproto[5]);
}

// ===================================================================

class ModeInfo_Single::_Internal {
 public:
};

ModeInfo_Single::ModeInfo_Single(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.ModeInfo.Single)
}
ModeInfo_Single::ModeInfo_Single(const ModeInfo_Single& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.ModeInfo.Single)
}

inline void ModeInfo_Single::SharedCtor() {
mode_ = 0;
}

ModeInfo_Single::~ModeInfo_Single() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.ModeInfo.Single)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModeInfo_Single::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModeInfo_Single::ArenaDtor(void* object) {
  ModeInfo_Single* _this = reinterpret_cast< ModeInfo_Single* >(object);
  (void)_this;
}
void ModeInfo_Single::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModeInfo_Single::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModeInfo_Single::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.ModeInfo.Single)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeInfo_Single::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.signing.v1beta1.SignMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::cosmos::signing::v1beta1::SignMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModeInfo_Single::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.ModeInfo.Single)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.signing.v1beta1.SignMode mode = 1;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.ModeInfo.Single)
  return target;
}

size_t ModeInfo_Single::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.ModeInfo.Single)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.signing.v1beta1.SignMode mode = 1;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModeInfo_Single::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModeInfo_Single::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModeInfo_Single::GetClassData() const { return &_class_data_; }

void ModeInfo_Single::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModeInfo_Single *>(to)->MergeFrom(
      static_cast<const ModeInfo_Single &>(from));
}


void ModeInfo_Single::MergeFrom(const ModeInfo_Single& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.ModeInfo.Single)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModeInfo_Single::CopyFrom(const ModeInfo_Single& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.ModeInfo.Single)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeInfo_Single::IsInitialized() const {
  return true;
}

void ModeInfo_Single::InternalSwap(ModeInfo_Single* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeInfo_Single::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tx_2eproto_getter, &descriptor_table_tx_2eproto_once,
      file_level_metadata_tx_2eproto[6]);
}

// ===================================================================

class ModeInfo_Multi::_Internal {
 public:
  static const ::cosmos::multisig::v1beta1::CompactBitArray& bitarray(const ModeInfo_Multi* msg);
};

const ::cosmos::multisig::v1beta1::CompactBitArray&
ModeInfo_Multi::_Internal::bitarray(const ModeInfo_Multi* msg) {
  return *msg->bitarray_;
}
void ModeInfo_Multi::clear_bitarray() {
  if (GetArenaForAllocation() == nullptr && bitarray_ != nullptr) {
    delete bitarray_;
  }
  bitarray_ = nullptr;
}
ModeInfo_Multi::ModeInfo_Multi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mode_infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.ModeInfo.Multi)
}
ModeInfo_Multi::ModeInfo_Multi(const ModeInfo_Multi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mode_infos_(from.mode_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bitarray()) {
    bitarray_ = new ::cosmos::multisig::v1beta1::CompactBitArray(*from.bitarray_);
  } else {
    bitarray_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.ModeInfo.Multi)
}

inline void ModeInfo_Multi::SharedCtor() {
bitarray_ = nullptr;
}

ModeInfo_Multi::~ModeInfo_Multi() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.ModeInfo.Multi)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModeInfo_Multi::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete bitarray_;
}

void ModeInfo_Multi::ArenaDtor(void* object) {
  ModeInfo_Multi* _this = reinterpret_cast< ModeInfo_Multi* >(object);
  (void)_this;
}
void ModeInfo_Multi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModeInfo_Multi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModeInfo_Multi::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.ModeInfo.Multi)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_infos_.Clear();
  if (GetArenaForAllocation() == nullptr && bitarray_ != nullptr) {
    delete bitarray_;
  }
  bitarray_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeInfo_Multi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.multisig.v1beta1.CompactBitArray bitarray = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitarray(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mode_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModeInfo_Multi::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.ModeInfo.Multi)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.multisig.v1beta1.CompactBitArray bitarray = 1;
  if (this->_internal_has_bitarray()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bitarray(this), target, stream);
  }

  // repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mode_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_mode_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.ModeInfo.Multi)
  return target;
}

size_t ModeInfo_Multi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.ModeInfo.Multi)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2;
  total_size += 1UL * this->_internal_mode_infos_size();
  for (const auto& msg : this->mode_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.multisig.v1beta1.CompactBitArray bitarray = 1;
  if (this->_internal_has_bitarray()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bitarray_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModeInfo_Multi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModeInfo_Multi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModeInfo_Multi::GetClassData() const { return &_class_data_; }

void ModeInfo_Multi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModeInfo_Multi *>(to)->MergeFrom(
      static_cast<const ModeInfo_Multi &>(from));
}


void ModeInfo_Multi::MergeFrom(const ModeInfo_Multi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.ModeInfo.Multi)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mode_infos_.MergeFrom(from.mode_infos_);
  if (from._internal_has_bitarray()) {
    _internal_mutable_bitarray()->::cosmos::multisig::v1beta1::CompactBitArray::MergeFrom(from._internal_bitarray());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModeInfo_Multi::CopyFrom(const ModeInfo_Multi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.ModeInfo.Multi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeInfo_Multi::IsInitialized() const {
  return true;
}

void ModeInfo_Multi::InternalSwap(ModeInfo_Multi* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mode_infos_.InternalSwap(&other->mode_infos_);
  swap(bitarray_, other->bitarray_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeInfo_Multi::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tx_2eproto_getter, &descriptor_table_tx_2eproto_once,
      file_level_metadata_tx_2eproto[7]);
}

// ===================================================================

class ModeInfo::_Internal {
 public:
  static const ::cosmos::tx::v1beta1::ModeInfo_Single& single(const ModeInfo* msg);
  static const ::cosmos::tx::v1beta1::ModeInfo_Multi& multi(const ModeInfo* msg);
};

const ::cosmos::tx::v1beta1::ModeInfo_Single&
ModeInfo::_Internal::single(const ModeInfo* msg) {
  return *msg->sum_.single_;
}
const ::cosmos::tx::v1beta1::ModeInfo_Multi&
ModeInfo::_Internal::multi(const ModeInfo* msg) {
  return *msg->sum_.multi_;
}
void ModeInfo::set_allocated_single(::cosmos::tx::v1beta1::ModeInfo_Single* single) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (single) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cosmos::tx::v1beta1::ModeInfo_Single>::GetOwningArena(single);
    if (message_arena != submessage_arena) {
      single = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single, submessage_arena);
    }
    set_has_single();
    sum_.single_ = single;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.ModeInfo.single)
}
void ModeInfo::set_allocated_multi(::cosmos::tx::v1beta1::ModeInfo_Multi* multi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (multi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cosmos::tx::v1beta1::ModeInfo_Multi>::GetOwningArena(multi);
    if (message_arena != submessage_arena) {
      multi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi, submessage_arena);
    }
    set_has_multi();
    sum_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.ModeInfo.multi)
}
ModeInfo::ModeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.ModeInfo)
}
ModeInfo::ModeInfo(const ModeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kSingle: {
      _internal_mutable_single()->::cosmos::tx::v1beta1::ModeInfo_Single::MergeFrom(from._internal_single());
      break;
    }
    case kMulti: {
      _internal_mutable_multi()->::cosmos::tx::v1beta1::ModeInfo_Multi::MergeFrom(from._internal_multi());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.ModeInfo)
}

inline void ModeInfo::SharedCtor() {
clear_has_sum();
}

ModeInfo::~ModeInfo() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.ModeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void ModeInfo::ArenaDtor(void* object) {
  ModeInfo* _this = reinterpret_cast< ModeInfo* >(object);
  (void)_this;
}
void ModeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModeInfo::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:cosmos.tx.v1beta1.ModeInfo)
  switch (sum_case()) {
    case kSingle: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.single_;
      }
      break;
    }
    case kMulti: {
      if (GetArenaForAllocation() == nullptr) {
        delete sum_.multi_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUM_NOT_SET;
}


void ModeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.ModeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.tx.v1beta1.ModeInfo.Single single = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_single(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cosmos.tx.v1beta1.ModeInfo.Multi multi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.ModeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.tx.v1beta1.ModeInfo.Single single = 1;
  if (_internal_has_single()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::single(this), target, stream);
  }

  // .cosmos.tx.v1beta1.ModeInfo.Multi multi = 2;
  if (_internal_has_multi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::multi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.ModeInfo)
  return target;
}

size_t ModeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.ModeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .cosmos.tx.v1beta1.ModeInfo.Single single = 1;
    case kSingle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.single_);
      break;
    }
    // .cosmos.tx.v1beta1.ModeInfo.Multi multi = 2;
    case kMulti: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sum_.multi_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModeInfo::GetClassData() const { return &_class_data_; }

void ModeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModeInfo *>(to)->MergeFrom(
      static_cast<const ModeInfo &>(from));
}


void ModeInfo::MergeFrom(const ModeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.ModeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kSingle: {
      _internal_mutable_single()->::cosmos::tx::v1beta1::ModeInfo_Single::MergeFrom(from._internal_single());
      break;
    }
    case kMulti: {
      _internal_mutable_multi()->::cosmos::tx::v1beta1::ModeInfo_Multi::MergeFrom(from._internal_multi());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModeInfo::CopyFrom(const ModeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.ModeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeInfo::IsInitialized() const {
  return true;
}

void ModeInfo::InternalSwap(ModeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sum_, other->sum_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tx_2eproto_getter, &descriptor_table_tx_2eproto_once,
      file_level_metadata_tx_2eproto[8]);
}

// ===================================================================

class Fee::_Internal {
 public:
};

void Fee::clear_amount() {
  amount_.Clear();
}
Fee::Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  amount_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.Fee)
}
Fee::Fee(const Fee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amount_(from.amount_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payer().empty()) {
    payer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payer(), 
      GetArenaForAllocation());
  }
  granter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    granter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_granter().empty()) {
    granter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_granter(), 
      GetArenaForAllocation());
  }
  gas_limit_ = from.gas_limit_;
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.Fee)
}

inline void Fee::SharedCtor() {
payer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
granter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  granter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gas_limit_ = uint64_t{0u};
}

Fee::~Fee() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.Fee)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Fee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  granter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Fee::ArenaDtor(void* object) {
  Fee* _this = reinterpret_cast< Fee* >(object);
  (void)_this;
}
void Fee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Fee::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.Fee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.Clear();
  payer_.ClearToEmpty();
  granter_.ClearToEmpty();
  gas_limit_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.tx.v1beta1.Fee.payer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string granter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_granter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.tx.v1beta1.Fee.granter"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.Fee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin amount = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_amount_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_amount(i), target, stream);
  }

  // uint64 gas_limit = 2;
  if (this->_internal_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gas_limit(), target);
  }

  // string payer = 3;
  if (!this->_internal_payer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payer().data(), static_cast<int>(this->_internal_payer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.tx.v1beta1.Fee.payer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payer(), target);
  }

  // string granter = 4;
  if (!this->_internal_granter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_granter().data(), static_cast<int>(this->_internal_granter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.tx.v1beta1.Fee.granter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_granter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.Fee)
  return target;
}

size_t Fee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.Fee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin amount = 1;
  total_size += 1UL * this->_internal_amount_size();
  for (const auto& msg : this->amount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string payer = 3;
  if (!this->_internal_payer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payer());
  }

  // string granter = 4;
  if (!this->_internal_granter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_granter());
  }

  // uint64 gas_limit = 2;
  if (this->_internal_gas_limit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Fee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fee::GetClassData() const { return &_class_data_; }

void Fee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Fee *>(to)->MergeFrom(
      static_cast<const Fee &>(from));
}


void Fee::MergeFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.Fee)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  amount_.MergeFrom(from.amount_);
  if (!from._internal_payer().empty()) {
    _internal_set_payer(from._internal_payer());
  }
  if (!from._internal_granter().empty()) {
    _internal_set_granter(from._internal_granter());
  }
  if (from._internal_gas_limit() != 0) {
    _internal_set_gas_limit(from._internal_gas_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fee::CopyFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fee::IsInitialized() const {
  return true;
}

void Fee::InternalSwap(Fee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  amount_.InternalSwap(&other->amount_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payer_, lhs_arena,
      &other->payer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &granter_, lhs_arena,
      &other->granter_, rhs_arena
  );
  swap(gas_limit_, other->gas_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Fee::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tx_2eproto_getter, &descriptor_table_tx_2eproto_once,
      file_level_metadata_tx_2eproto[9]);
}

// ===================================================================

class Tip::_Internal {
 public:
};

void Tip::clear_amount() {
  amount_.Clear();
}
Tip::Tip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  amount_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.v1beta1.Tip)
}
Tip::Tip(const Tip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amount_(from.amount_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tipper_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tipper_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tipper().empty()) {
    tipper_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tipper(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.v1beta1.Tip)
}

inline void Tip::SharedCtor() {
tipper_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tipper_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tip::~Tip() {
  // @@protoc_insertion_point(destructor:cosmos.tx.v1beta1.Tip)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Tip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tipper_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Tip::ArenaDtor(void* object) {
  Tip* _this = reinterpret_cast< Tip* >(object);
  (void)_this;
}
void Tip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tip::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.v1beta1.Tip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_.Clear();
  tipper_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string tipper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tipper();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cosmos.tx.v1beta1.Tip.tipper"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.v1beta1.Tip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin amount = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_amount_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_amount(i), target, stream);
  }

  // string tipper = 2;
  if (!this->_internal_tipper().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tipper().data(), static_cast<int>(this->_internal_tipper().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cosmos.tx.v1beta1.Tip.tipper");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tipper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.v1beta1.Tip)
  return target;
}

size_t Tip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.v1beta1.Tip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin amount = 1;
  total_size += 1UL * this->_internal_amount_size();
  for (const auto& msg : this->amount_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tipper = 2;
  if (!this->_internal_tipper().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tipper());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Tip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tip::GetClassData() const { return &_class_data_; }

void Tip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Tip *>(to)->MergeFrom(
      static_cast<const Tip &>(from));
}


void Tip::MergeFrom(const Tip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.v1beta1.Tip)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  amount_.MergeFrom(from.amount_);
  if (!from._internal_tipper().empty()) {
    _internal_set_tipper(from._internal_tipper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tip::CopyFrom(const Tip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.v1beta1.Tip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tip::IsInitialized() const {
  return true;
}

void Tip::InternalSwap(Tip* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  amount_.InternalSwap(&other->amount_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tipper_, lhs_arena,
      &other->tipper_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Tip::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tx_2eproto_getter, &descriptor_table_tx_2eproto_once,
      file_level_metadata_tx_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::Tx* Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::Tx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::Tx >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::TxRaw* Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::TxRaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::TxRaw >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::SignDoc* Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::SignDoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::SignDoc >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::TxBody* Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::TxBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::TxBody >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::AuthInfo* Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::AuthInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::AuthInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::SignerInfo* Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::SignerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::SignerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::ModeInfo_Single* Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::ModeInfo_Single >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::ModeInfo_Single >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::ModeInfo_Multi* Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::ModeInfo_Multi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::ModeInfo_Multi >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::ModeInfo* Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::ModeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::ModeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::Fee* Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::Fee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::Fee >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::v1beta1::Tip* Arena::CreateMaybeMessage< ::cosmos::tx::v1beta1::Tip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::v1beta1::Tip >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
