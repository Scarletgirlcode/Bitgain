// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: staking_tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_staking_5ftx_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_staking_5ftx_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "coin.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_staking_5ftx_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_staking_5ftx_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_staking_5ftx_2eproto;
namespace cosmos {
namespace staking {
namespace v1beta1 {
class MsgBeginRedelegate;
struct MsgBeginRedelegateDefaultTypeInternal;
extern MsgBeginRedelegateDefaultTypeInternal _MsgBeginRedelegate_default_instance_;
class MsgDelegate;
struct MsgDelegateDefaultTypeInternal;
extern MsgDelegateDefaultTypeInternal _MsgDelegate_default_instance_;
class MsgUndelegate;
struct MsgUndelegateDefaultTypeInternal;
extern MsgUndelegateDefaultTypeInternal _MsgUndelegate_default_instance_;
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> ::cosmos::staking::v1beta1::MsgBeginRedelegate* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgBeginRedelegate>(Arena*);
template<> ::cosmos::staking::v1beta1::MsgDelegate* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgDelegate>(Arena*);
template<> ::cosmos::staking::v1beta1::MsgUndelegate* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgUndelegate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cosmos {
namespace staking {
namespace v1beta1 {

// ===================================================================

class MsgDelegate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgDelegate) */ {
 public:
  inline MsgDelegate() : MsgDelegate(nullptr) {}
  ~MsgDelegate() override;
  explicit constexpr MsgDelegate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgDelegate(const MsgDelegate& from);
  MsgDelegate(MsgDelegate&& from) noexcept
    : MsgDelegate() {
    *this = ::std::move(from);
  }

  inline MsgDelegate& operator=(const MsgDelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDelegate& operator=(MsgDelegate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgDelegate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgDelegate* internal_default_instance() {
    return reinterpret_cast<const MsgDelegate*>(
               &_MsgDelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgDelegate& a, MsgDelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDelegate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDelegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgDelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgDelegate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgDelegate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgDelegate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDelegate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.staking.v1beta1.MsgDelegate";
  }
  protected:
  explicit MsgDelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // string validator_address = 2;
  void clear_validator_address();
  const std::string& validator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* validator_address);
  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(const std::string& value);
  std::string* _internal_mutable_validator_address();
  public:

  // .cosmos.base.v1beta1.Coin amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();

  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgDelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
  ::cosmos::base::v1beta1::Coin* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_staking_5ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgUndelegate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgUndelegate) */ {
 public:
  inline MsgUndelegate() : MsgUndelegate(nullptr) {}
  ~MsgUndelegate() override;
  explicit constexpr MsgUndelegate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUndelegate(const MsgUndelegate& from);
  MsgUndelegate(MsgUndelegate&& from) noexcept
    : MsgUndelegate() {
    *this = ::std::move(from);
  }

  inline MsgUndelegate& operator=(const MsgUndelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUndelegate& operator=(MsgUndelegate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUndelegate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUndelegate* internal_default_instance() {
    return reinterpret_cast<const MsgUndelegate*>(
               &_MsgUndelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgUndelegate& a, MsgUndelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUndelegate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUndelegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUndelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUndelegate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUndelegate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgUndelegate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUndelegate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.staking.v1beta1.MsgUndelegate";
  }
  protected:
  explicit MsgUndelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // string validator_address = 2;
  void clear_validator_address();
  const std::string& validator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* validator_address);
  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(const std::string& value);
  std::string* _internal_mutable_validator_address();
  public:

  // .cosmos.base.v1beta1.Coin amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();

  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgUndelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
  ::cosmos::base::v1beta1::Coin* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_staking_5ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgBeginRedelegate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgBeginRedelegate) */ {
 public:
  inline MsgBeginRedelegate() : MsgBeginRedelegate(nullptr) {}
  ~MsgBeginRedelegate() override;
  explicit constexpr MsgBeginRedelegate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgBeginRedelegate(const MsgBeginRedelegate& from);
  MsgBeginRedelegate(MsgBeginRedelegate&& from) noexcept
    : MsgBeginRedelegate() {
    *this = ::std::move(from);
  }

  inline MsgBeginRedelegate& operator=(const MsgBeginRedelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBeginRedelegate& operator=(MsgBeginRedelegate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgBeginRedelegate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgBeginRedelegate* internal_default_instance() {
    return reinterpret_cast<const MsgBeginRedelegate*>(
               &_MsgBeginRedelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgBeginRedelegate& a, MsgBeginRedelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBeginRedelegate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBeginRedelegate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgBeginRedelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgBeginRedelegate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgBeginRedelegate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgBeginRedelegate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBeginRedelegate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.staking.v1beta1.MsgBeginRedelegate";
  }
  protected:
  explicit MsgBeginRedelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorSrcAddressFieldNumber = 2,
    kValidatorDstAddressFieldNumber = 3,
    kAmountFieldNumber = 4,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // string validator_src_address = 2;
  void clear_validator_src_address();
  const std::string& validator_src_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_src_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_src_address();
  PROTOBUF_NODISCARD std::string* release_validator_src_address();
  void set_allocated_validator_src_address(std::string* validator_src_address);
  private:
  const std::string& _internal_validator_src_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_src_address(const std::string& value);
  std::string* _internal_mutable_validator_src_address();
  public:

  // string validator_dst_address = 3;
  void clear_validator_dst_address();
  const std::string& validator_dst_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_dst_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_dst_address();
  PROTOBUF_NODISCARD std::string* release_validator_dst_address();
  void set_allocated_validator_dst_address(std::string* validator_dst_address);
  private:
  const std::string& _internal_validator_dst_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_dst_address(const std::string& value);
  std::string* _internal_mutable_validator_dst_address();
  public:

  // .cosmos.base.v1beta1.Coin amount = 4;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();

  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgBeginRedelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_src_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_dst_address_;
  ::cosmos::base::v1beta1::Coin* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_staking_5ftx_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgDelegate

// string delegator_address = 1;
inline void MsgDelegate::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& MsgDelegate::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
  return _internal_delegator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgDelegate::set_delegator_address(ArgT0&& arg0, ArgT... args) {
 
 delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
}
inline std::string* MsgDelegate::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
  return _s;
}
inline const std::string& MsgDelegate::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void MsgDelegate::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgDelegate::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgDelegate::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgDelegate::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delegator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delegator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
}

// string validator_address = 2;
inline void MsgDelegate::clear_validator_address() {
  validator_address_.ClearToEmpty();
}
inline const std::string& MsgDelegate::validator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgDelegate.validator_address)
  return _internal_validator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgDelegate::set_validator_address(ArgT0&& arg0, ArgT... args) {
 
 validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgDelegate.validator_address)
}
inline std::string* MsgDelegate::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgDelegate.validator_address)
  return _s;
}
inline const std::string& MsgDelegate::_internal_validator_address() const {
  return validator_address_.Get();
}
inline void MsgDelegate::_internal_set_validator_address(const std::string& value) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgDelegate::_internal_mutable_validator_address() {
  
  return validator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgDelegate::release_validator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgDelegate.validator_address)
  return validator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgDelegate::set_allocated_validator_address(std::string* validator_address) {
  if (validator_address != nullptr) {
    
  } else {
    
  }
  validator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (validator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    validator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgDelegate.validator_address)
}

// .cosmos.base.v1beta1.Coin amount = 3;
inline bool MsgDelegate::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool MsgDelegate::has_amount() const {
  return _internal_has_amount();
}
inline const ::cosmos::base::v1beta1::Coin& MsgDelegate::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgDelegate::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgDelegate.amount)
  return _internal_amount();
}
inline void MsgDelegate::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgDelegate.amount)
}
inline ::cosmos::base::v1beta1::Coin* MsgDelegate::release_amount() {
  
  ::cosmos::base::v1beta1::Coin* temp = amount_;
  amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgDelegate::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgDelegate.amount)
  
  ::cosmos::base::v1beta1::Coin* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgDelegate::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    amount_ = p;
  }
  return amount_;
}
inline ::cosmos::base::v1beta1::Coin* MsgDelegate::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgDelegate.amount)
  return _msg;
}
inline void MsgDelegate::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgDelegate.amount)
}

// -------------------------------------------------------------------

// MsgUndelegate

// string delegator_address = 1;
inline void MsgUndelegate::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& MsgUndelegate::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgUndelegate.delegator_address)
  return _internal_delegator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgUndelegate::set_delegator_address(ArgT0&& arg0, ArgT... args) {
 
 delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgUndelegate.delegator_address)
}
inline std::string* MsgUndelegate::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgUndelegate.delegator_address)
  return _s;
}
inline const std::string& MsgUndelegate::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void MsgUndelegate::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgUndelegate::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgUndelegate::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgUndelegate.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgUndelegate::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delegator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delegator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgUndelegate.delegator_address)
}

// string validator_address = 2;
inline void MsgUndelegate::clear_validator_address() {
  validator_address_.ClearToEmpty();
}
inline const std::string& MsgUndelegate::validator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgUndelegate.validator_address)
  return _internal_validator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgUndelegate::set_validator_address(ArgT0&& arg0, ArgT... args) {
 
 validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgUndelegate.validator_address)
}
inline std::string* MsgUndelegate::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgUndelegate.validator_address)
  return _s;
}
inline const std::string& MsgUndelegate::_internal_validator_address() const {
  return validator_address_.Get();
}
inline void MsgUndelegate::_internal_set_validator_address(const std::string& value) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgUndelegate::_internal_mutable_validator_address() {
  
  return validator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgUndelegate::release_validator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgUndelegate.validator_address)
  return validator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgUndelegate::set_allocated_validator_address(std::string* validator_address) {
  if (validator_address != nullptr) {
    
  } else {
    
  }
  validator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (validator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    validator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgUndelegate.validator_address)
}

// .cosmos.base.v1beta1.Coin amount = 3;
inline bool MsgUndelegate::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool MsgUndelegate::has_amount() const {
  return _internal_has_amount();
}
inline const ::cosmos::base::v1beta1::Coin& MsgUndelegate::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgUndelegate::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgUndelegate.amount)
  return _internal_amount();
}
inline void MsgUndelegate::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgUndelegate.amount)
}
inline ::cosmos::base::v1beta1::Coin* MsgUndelegate::release_amount() {
  
  ::cosmos::base::v1beta1::Coin* temp = amount_;
  amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgUndelegate::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgUndelegate.amount)
  
  ::cosmos::base::v1beta1::Coin* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgUndelegate::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    amount_ = p;
  }
  return amount_;
}
inline ::cosmos::base::v1beta1::Coin* MsgUndelegate::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgUndelegate.amount)
  return _msg;
}
inline void MsgUndelegate::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgUndelegate.amount)
}

// -------------------------------------------------------------------

// MsgBeginRedelegate

// string delegator_address = 1;
inline void MsgBeginRedelegate::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& MsgBeginRedelegate::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
  return _internal_delegator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgBeginRedelegate::set_delegator_address(ArgT0&& arg0, ArgT... args) {
 
 delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
}
inline std::string* MsgBeginRedelegate::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
  return _s;
}
inline const std::string& MsgBeginRedelegate::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void MsgBeginRedelegate::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgBeginRedelegate::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delegator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delegator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
}

// string validator_src_address = 2;
inline void MsgBeginRedelegate::clear_validator_src_address() {
  validator_src_address_.ClearToEmpty();
}
inline const std::string& MsgBeginRedelegate::validator_src_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
  return _internal_validator_src_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgBeginRedelegate::set_validator_src_address(ArgT0&& arg0, ArgT... args) {
 
 validator_src_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
}
inline std::string* MsgBeginRedelegate::mutable_validator_src_address() {
  std::string* _s = _internal_mutable_validator_src_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
  return _s;
}
inline const std::string& MsgBeginRedelegate::_internal_validator_src_address() const {
  return validator_src_address_.Get();
}
inline void MsgBeginRedelegate::_internal_set_validator_src_address(const std::string& value) {
  
  validator_src_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::_internal_mutable_validator_src_address() {
  
  return validator_src_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::release_validator_src_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
  return validator_src_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgBeginRedelegate::set_allocated_validator_src_address(std::string* validator_src_address) {
  if (validator_src_address != nullptr) {
    
  } else {
    
  }
  validator_src_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_src_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (validator_src_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    validator_src_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
}

// string validator_dst_address = 3;
inline void MsgBeginRedelegate::clear_validator_dst_address() {
  validator_dst_address_.ClearToEmpty();
}
inline const std::string& MsgBeginRedelegate::validator_dst_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
  return _internal_validator_dst_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgBeginRedelegate::set_validator_dst_address(ArgT0&& arg0, ArgT... args) {
 
 validator_dst_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
}
inline std::string* MsgBeginRedelegate::mutable_validator_dst_address() {
  std::string* _s = _internal_mutable_validator_dst_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
  return _s;
}
inline const std::string& MsgBeginRedelegate::_internal_validator_dst_address() const {
  return validator_dst_address_.Get();
}
inline void MsgBeginRedelegate::_internal_set_validator_dst_address(const std::string& value) {
  
  validator_dst_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::_internal_mutable_validator_dst_address() {
  
  return validator_dst_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::release_validator_dst_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
  return validator_dst_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgBeginRedelegate::set_allocated_validator_dst_address(std::string* validator_dst_address) {
  if (validator_dst_address != nullptr) {
    
  } else {
    
  }
  validator_dst_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_dst_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (validator_dst_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    validator_dst_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
}

// .cosmos.base.v1beta1.Coin amount = 4;
inline bool MsgBeginRedelegate::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool MsgBeginRedelegate::has_amount() const {
  return _internal_has_amount();
}
inline const ::cosmos::base::v1beta1::Coin& MsgBeginRedelegate::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgBeginRedelegate::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
  return _internal_amount();
}
inline void MsgBeginRedelegate::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
}
inline ::cosmos::base::v1beta1::Coin* MsgBeginRedelegate::release_amount() {
  
  ::cosmos::base::v1beta1::Coin* temp = amount_;
  amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgBeginRedelegate::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
  
  ::cosmos::base::v1beta1::Coin* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgBeginRedelegate::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    amount_ = p;
  }
  return amount_;
}
inline ::cosmos::base::v1beta1::Coin* MsgBeginRedelegate::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
  return _msg;
}
inline void MsgBeginRedelegate::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_staking_5ftx_2eproto
