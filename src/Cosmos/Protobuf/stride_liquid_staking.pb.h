// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stride_liquid_staking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stride_5fliquid_5fstaking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stride_5fliquid_5fstaking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stride_5fliquid_5fstaking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stride_5fliquid_5fstaking_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stride_5fliquid_5fstaking_2eproto;
namespace stride {
namespace stakeibc {
class MsgLiquidStake;
struct MsgLiquidStakeDefaultTypeInternal;
extern MsgLiquidStakeDefaultTypeInternal _MsgLiquidStake_default_instance_;
class MsgRedeemStake;
struct MsgRedeemStakeDefaultTypeInternal;
extern MsgRedeemStakeDefaultTypeInternal _MsgRedeemStake_default_instance_;
}  // namespace stakeibc
}  // namespace stride
PROTOBUF_NAMESPACE_OPEN
template<> ::stride::stakeibc::MsgLiquidStake* Arena::CreateMaybeMessage<::stride::stakeibc::MsgLiquidStake>(Arena*);
template<> ::stride::stakeibc::MsgRedeemStake* Arena::CreateMaybeMessage<::stride::stakeibc::MsgRedeemStake>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace stride {
namespace stakeibc {

// ===================================================================

class MsgLiquidStake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stride.stakeibc.MsgLiquidStake) */ {
 public:
  inline MsgLiquidStake() : MsgLiquidStake(nullptr) {}
  ~MsgLiquidStake() override;
  explicit constexpr MsgLiquidStake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgLiquidStake(const MsgLiquidStake& from);
  MsgLiquidStake(MsgLiquidStake&& from) noexcept
    : MsgLiquidStake() {
    *this = ::std::move(from);
  }

  inline MsgLiquidStake& operator=(const MsgLiquidStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgLiquidStake& operator=(MsgLiquidStake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgLiquidStake& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgLiquidStake* internal_default_instance() {
    return reinterpret_cast<const MsgLiquidStake*>(
               &_MsgLiquidStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgLiquidStake& a, MsgLiquidStake& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgLiquidStake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgLiquidStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgLiquidStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgLiquidStake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgLiquidStake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgLiquidStake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgLiquidStake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stride.stakeibc.MsgLiquidStake";
  }
  protected:
  explicit MsgLiquidStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatorFieldNumber = 1,
    kAmountFieldNumber = 2,
    kHostDenomFieldNumber = 3,
  };
  // string creator = 1;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string host_denom = 3;
  void clear_host_denom();
  const std::string& host_denom() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_denom(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_denom();
  PROTOBUF_NODISCARD std::string* release_host_denom();
  void set_allocated_host_denom(std::string* host_denom);
  private:
  const std::string& _internal_host_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_denom(const std::string& value);
  std::string* _internal_mutable_host_denom();
  public:

  // @@protoc_insertion_point(class_scope:stride.stakeibc.MsgLiquidStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_denom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stride_5fliquid_5fstaking_2eproto;
};
// -------------------------------------------------------------------

class MsgRedeemStake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stride.stakeibc.MsgRedeemStake) */ {
 public:
  inline MsgRedeemStake() : MsgRedeemStake(nullptr) {}
  ~MsgRedeemStake() override;
  explicit constexpr MsgRedeemStake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRedeemStake(const MsgRedeemStake& from);
  MsgRedeemStake(MsgRedeemStake&& from) noexcept
    : MsgRedeemStake() {
    *this = ::std::move(from);
  }

  inline MsgRedeemStake& operator=(const MsgRedeemStake& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRedeemStake& operator=(MsgRedeemStake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRedeemStake& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRedeemStake* internal_default_instance() {
    return reinterpret_cast<const MsgRedeemStake*>(
               &_MsgRedeemStake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgRedeemStake& a, MsgRedeemStake& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRedeemStake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRedeemStake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRedeemStake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRedeemStake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRedeemStake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgRedeemStake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRedeemStake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stride.stakeibc.MsgRedeemStake";
  }
  protected:
  explicit MsgRedeemStake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatorFieldNumber = 1,
    kAmountFieldNumber = 2,
    kHostZoneFieldNumber = 3,
    kReceiverFieldNumber = 4,
  };
  // string creator = 1;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string host_zone = 3;
  void clear_host_zone();
  const std::string& host_zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_zone();
  PROTOBUF_NODISCARD std::string* release_host_zone();
  void set_allocated_host_zone(std::string* host_zone);
  private:
  const std::string& _internal_host_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_zone(const std::string& value);
  std::string* _internal_mutable_host_zone();
  public:

  // string receiver = 4;
  void clear_receiver();
  const std::string& receiver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver();
  PROTOBUF_NODISCARD std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // @@protoc_insertion_point(class_scope:stride.stakeibc.MsgRedeemStake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_zone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stride_5fliquid_5fstaking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgLiquidStake

// string creator = 1;
inline void MsgLiquidStake::clear_creator() {
  creator_.ClearToEmpty();
}
inline const std::string& MsgLiquidStake::creator() const {
  // @@protoc_insertion_point(field_get:stride.stakeibc.MsgLiquidStake.creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgLiquidStake::set_creator(ArgT0&& arg0, ArgT... args) {
 
 creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stride.stakeibc.MsgLiquidStake.creator)
}
inline std::string* MsgLiquidStake::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:stride.stakeibc.MsgLiquidStake.creator)
  return _s;
}
inline const std::string& MsgLiquidStake::_internal_creator() const {
  return creator_.Get();
}
inline void MsgLiquidStake::_internal_set_creator(const std::string& value) {
  
  creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgLiquidStake::_internal_mutable_creator() {
  
  return creator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgLiquidStake::release_creator() {
  // @@protoc_insertion_point(field_release:stride.stakeibc.MsgLiquidStake.creator)
  return creator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgLiquidStake::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  creator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creator_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stride.stakeibc.MsgLiquidStake.creator)
}

// string amount = 2;
inline void MsgLiquidStake::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& MsgLiquidStake::amount() const {
  // @@protoc_insertion_point(field_get:stride.stakeibc.MsgLiquidStake.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgLiquidStake::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stride.stakeibc.MsgLiquidStake.amount)
}
inline std::string* MsgLiquidStake::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:stride.stakeibc.MsgLiquidStake.amount)
  return _s;
}
inline const std::string& MsgLiquidStake::_internal_amount() const {
  return amount_.Get();
}
inline void MsgLiquidStake::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgLiquidStake::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgLiquidStake::release_amount() {
  // @@protoc_insertion_point(field_release:stride.stakeibc.MsgLiquidStake.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgLiquidStake::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stride.stakeibc.MsgLiquidStake.amount)
}

// string host_denom = 3;
inline void MsgLiquidStake::clear_host_denom() {
  host_denom_.ClearToEmpty();
}
inline const std::string& MsgLiquidStake::host_denom() const {
  // @@protoc_insertion_point(field_get:stride.stakeibc.MsgLiquidStake.host_denom)
  return _internal_host_denom();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgLiquidStake::set_host_denom(ArgT0&& arg0, ArgT... args) {
 
 host_denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stride.stakeibc.MsgLiquidStake.host_denom)
}
inline std::string* MsgLiquidStake::mutable_host_denom() {
  std::string* _s = _internal_mutable_host_denom();
  // @@protoc_insertion_point(field_mutable:stride.stakeibc.MsgLiquidStake.host_denom)
  return _s;
}
inline const std::string& MsgLiquidStake::_internal_host_denom() const {
  return host_denom_.Get();
}
inline void MsgLiquidStake::_internal_set_host_denom(const std::string& value) {
  
  host_denom_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgLiquidStake::_internal_mutable_host_denom() {
  
  return host_denom_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgLiquidStake::release_host_denom() {
  // @@protoc_insertion_point(field_release:stride.stakeibc.MsgLiquidStake.host_denom)
  return host_denom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgLiquidStake::set_allocated_host_denom(std::string* host_denom) {
  if (host_denom != nullptr) {
    
  } else {
    
  }
  host_denom_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_denom,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_denom_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_denom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stride.stakeibc.MsgLiquidStake.host_denom)
}

// -------------------------------------------------------------------

// MsgRedeemStake

// string creator = 1;
inline void MsgRedeemStake::clear_creator() {
  creator_.ClearToEmpty();
}
inline const std::string& MsgRedeemStake::creator() const {
  // @@protoc_insertion_point(field_get:stride.stakeibc.MsgRedeemStake.creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgRedeemStake::set_creator(ArgT0&& arg0, ArgT... args) {
 
 creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stride.stakeibc.MsgRedeemStake.creator)
}
inline std::string* MsgRedeemStake::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:stride.stakeibc.MsgRedeemStake.creator)
  return _s;
}
inline const std::string& MsgRedeemStake::_internal_creator() const {
  return creator_.Get();
}
inline void MsgRedeemStake::_internal_set_creator(const std::string& value) {
  
  creator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgRedeemStake::_internal_mutable_creator() {
  
  return creator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgRedeemStake::release_creator() {
  // @@protoc_insertion_point(field_release:stride.stakeibc.MsgRedeemStake.creator)
  return creator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgRedeemStake::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  creator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (creator_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    creator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stride.stakeibc.MsgRedeemStake.creator)
}

// string amount = 2;
inline void MsgRedeemStake::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& MsgRedeemStake::amount() const {
  // @@protoc_insertion_point(field_get:stride.stakeibc.MsgRedeemStake.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgRedeemStake::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stride.stakeibc.MsgRedeemStake.amount)
}
inline std::string* MsgRedeemStake::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:stride.stakeibc.MsgRedeemStake.amount)
  return _s;
}
inline const std::string& MsgRedeemStake::_internal_amount() const {
  return amount_.Get();
}
inline void MsgRedeemStake::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgRedeemStake::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgRedeemStake::release_amount() {
  // @@protoc_insertion_point(field_release:stride.stakeibc.MsgRedeemStake.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgRedeemStake::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stride.stakeibc.MsgRedeemStake.amount)
}

// string host_zone = 3;
inline void MsgRedeemStake::clear_host_zone() {
  host_zone_.ClearToEmpty();
}
inline const std::string& MsgRedeemStake::host_zone() const {
  // @@protoc_insertion_point(field_get:stride.stakeibc.MsgRedeemStake.host_zone)
  return _internal_host_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgRedeemStake::set_host_zone(ArgT0&& arg0, ArgT... args) {
 
 host_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stride.stakeibc.MsgRedeemStake.host_zone)
}
inline std::string* MsgRedeemStake::mutable_host_zone() {
  std::string* _s = _internal_mutable_host_zone();
  // @@protoc_insertion_point(field_mutable:stride.stakeibc.MsgRedeemStake.host_zone)
  return _s;
}
inline const std::string& MsgRedeemStake::_internal_host_zone() const {
  return host_zone_.Get();
}
inline void MsgRedeemStake::_internal_set_host_zone(const std::string& value) {
  
  host_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgRedeemStake::_internal_mutable_host_zone() {
  
  return host_zone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgRedeemStake::release_host_zone() {
  // @@protoc_insertion_point(field_release:stride.stakeibc.MsgRedeemStake.host_zone)
  return host_zone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgRedeemStake::set_allocated_host_zone(std::string* host_zone) {
  if (host_zone != nullptr) {
    
  } else {
    
  }
  host_zone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_zone,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_zone_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    host_zone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stride.stakeibc.MsgRedeemStake.host_zone)
}

// string receiver = 4;
inline void MsgRedeemStake::clear_receiver() {
  receiver_.ClearToEmpty();
}
inline const std::string& MsgRedeemStake::receiver() const {
  // @@protoc_insertion_point(field_get:stride.stakeibc.MsgRedeemStake.receiver)
  return _internal_receiver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgRedeemStake::set_receiver(ArgT0&& arg0, ArgT... args) {
 
 receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stride.stakeibc.MsgRedeemStake.receiver)
}
inline std::string* MsgRedeemStake::mutable_receiver() {
  std::string* _s = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:stride.stakeibc.MsgRedeemStake.receiver)
  return _s;
}
inline const std::string& MsgRedeemStake::_internal_receiver() const {
  return receiver_.Get();
}
inline void MsgRedeemStake::_internal_set_receiver(const std::string& value) {
  
  receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgRedeemStake::_internal_mutable_receiver() {
  
  return receiver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgRedeemStake::release_receiver() {
  // @@protoc_insertion_point(field_release:stride.stakeibc.MsgRedeemStake.receiver)
  return receiver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgRedeemStake::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stride.stakeibc.MsgRedeemStake.receiver)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stakeibc
}  // namespace stride

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stride_5fliquid_5fstaking_2eproto
