// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distribution_tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_distribution_5ftx_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_distribution_5ftx_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_distribution_5ftx_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_distribution_5ftx_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_distribution_5ftx_2eproto;
namespace cosmos {
namespace distribution {
namespace v1beta1 {
class MsgSetWithdrawAddress;
struct MsgSetWithdrawAddressDefaultTypeInternal;
extern MsgSetWithdrawAddressDefaultTypeInternal _MsgSetWithdrawAddress_default_instance_;
class MsgWithdrawDelegatorReward;
struct MsgWithdrawDelegatorRewardDefaultTypeInternal;
extern MsgWithdrawDelegatorRewardDefaultTypeInternal _MsgWithdrawDelegatorReward_default_instance_;
}  // namespace v1beta1
}  // namespace distribution
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* Arena::CreateMaybeMessage<::cosmos::distribution::v1beta1::MsgSetWithdrawAddress>(Arena*);
template<> ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* Arena::CreateMaybeMessage<::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cosmos {
namespace distribution {
namespace v1beta1 {

// ===================================================================

class MsgSetWithdrawAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.MsgSetWithdrawAddress) */ {
 public:
  inline MsgSetWithdrawAddress() : MsgSetWithdrawAddress(nullptr) {}
  ~MsgSetWithdrawAddress() override;
  explicit constexpr MsgSetWithdrawAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSetWithdrawAddress(const MsgSetWithdrawAddress& from);
  MsgSetWithdrawAddress(MsgSetWithdrawAddress&& from) noexcept
    : MsgSetWithdrawAddress() {
    *this = ::std::move(from);
  }

  inline MsgSetWithdrawAddress& operator=(const MsgSetWithdrawAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSetWithdrawAddress& operator=(MsgSetWithdrawAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSetWithdrawAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSetWithdrawAddress* internal_default_instance() {
    return reinterpret_cast<const MsgSetWithdrawAddress*>(
               &_MsgSetWithdrawAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgSetWithdrawAddress& a, MsgSetWithdrawAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSetWithdrawAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSetWithdrawAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSetWithdrawAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSetWithdrawAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSetWithdrawAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgSetWithdrawAddress& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSetWithdrawAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.distribution.v1beta1.MsgSetWithdrawAddress";
  }
  protected:
  explicit MsgSetWithdrawAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kWithdrawAddressFieldNumber = 2,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // string withdraw_address = 2;
  void clear_withdraw_address();
  const std::string& withdraw_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_withdraw_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_withdraw_address();
  PROTOBUF_NODISCARD std::string* release_withdraw_address();
  void set_allocated_withdraw_address(std::string* withdraw_address);
  private:
  const std::string& _internal_withdraw_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_withdraw_address(const std::string& value);
  std::string* _internal_mutable_withdraw_address();
  public:

  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.MsgSetWithdrawAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr withdraw_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distribution_5ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgWithdrawDelegatorReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward) */ {
 public:
  inline MsgWithdrawDelegatorReward() : MsgWithdrawDelegatorReward(nullptr) {}
  ~MsgWithdrawDelegatorReward() override;
  explicit constexpr MsgWithdrawDelegatorReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgWithdrawDelegatorReward(const MsgWithdrawDelegatorReward& from);
  MsgWithdrawDelegatorReward(MsgWithdrawDelegatorReward&& from) noexcept
    : MsgWithdrawDelegatorReward() {
    *this = ::std::move(from);
  }

  inline MsgWithdrawDelegatorReward& operator=(const MsgWithdrawDelegatorReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgWithdrawDelegatorReward& operator=(MsgWithdrawDelegatorReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgWithdrawDelegatorReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgWithdrawDelegatorReward* internal_default_instance() {
    return reinterpret_cast<const MsgWithdrawDelegatorReward*>(
               &_MsgWithdrawDelegatorReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgWithdrawDelegatorReward& a, MsgWithdrawDelegatorReward& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgWithdrawDelegatorReward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgWithdrawDelegatorReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgWithdrawDelegatorReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgWithdrawDelegatorReward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgWithdrawDelegatorReward& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgWithdrawDelegatorReward& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgWithdrawDelegatorReward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward";
  }
  protected:
  explicit MsgWithdrawDelegatorReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
  };
  // string delegator_address = 1;
  void clear_delegator_address();
  const std::string& delegator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* delegator_address);
  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(const std::string& value);
  std::string* _internal_mutable_delegator_address();
  public:

  // string validator_address = 2;
  void clear_validator_address();
  const std::string& validator_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* validator_address);
  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(const std::string& value);
  std::string* _internal_mutable_validator_address();
  public:

  // @@protoc_insertion_point(class_scope:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distribution_5ftx_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgSetWithdrawAddress

// string delegator_address = 1;
inline void MsgSetWithdrawAddress::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& MsgSetWithdrawAddress::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.delegator_address)
  return _internal_delegator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgSetWithdrawAddress::set_delegator_address(ArgT0&& arg0, ArgT... args) {
 
 delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.delegator_address)
}
inline std::string* MsgSetWithdrawAddress::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.delegator_address)
  return _s;
}
inline const std::string& MsgSetWithdrawAddress::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void MsgSetWithdrawAddress::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgSetWithdrawAddress::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgSetWithdrawAddress::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgSetWithdrawAddress::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delegator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delegator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.delegator_address)
}

// string withdraw_address = 2;
inline void MsgSetWithdrawAddress::clear_withdraw_address() {
  withdraw_address_.ClearToEmpty();
}
inline const std::string& MsgSetWithdrawAddress::withdraw_address() const {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.withdraw_address)
  return _internal_withdraw_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgSetWithdrawAddress::set_withdraw_address(ArgT0&& arg0, ArgT... args) {
 
 withdraw_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.withdraw_address)
}
inline std::string* MsgSetWithdrawAddress::mutable_withdraw_address() {
  std::string* _s = _internal_mutable_withdraw_address();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.withdraw_address)
  return _s;
}
inline const std::string& MsgSetWithdrawAddress::_internal_withdraw_address() const {
  return withdraw_address_.Get();
}
inline void MsgSetWithdrawAddress::_internal_set_withdraw_address(const std::string& value) {
  
  withdraw_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgSetWithdrawAddress::_internal_mutable_withdraw_address() {
  
  return withdraw_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgSetWithdrawAddress::release_withdraw_address() {
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.withdraw_address)
  return withdraw_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgSetWithdrawAddress::set_allocated_withdraw_address(std::string* withdraw_address) {
  if (withdraw_address != nullptr) {
    
  } else {
    
  }
  withdraw_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), withdraw_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (withdraw_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    withdraw_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.MsgSetWithdrawAddress.withdraw_address)
}

// -------------------------------------------------------------------

// MsgWithdrawDelegatorReward

// string delegator_address = 1;
inline void MsgWithdrawDelegatorReward::clear_delegator_address() {
  delegator_address_.ClearToEmpty();
}
inline const std::string& MsgWithdrawDelegatorReward::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.delegator_address)
  return _internal_delegator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgWithdrawDelegatorReward::set_delegator_address(ArgT0&& arg0, ArgT... args) {
 
 delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.delegator_address)
}
inline std::string* MsgWithdrawDelegatorReward::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.delegator_address)
  return _s;
}
inline const std::string& MsgWithdrawDelegatorReward::_internal_delegator_address() const {
  return delegator_address_.Get();
}
inline void MsgWithdrawDelegatorReward::_internal_set_delegator_address(const std::string& value) {
  
  delegator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgWithdrawDelegatorReward::_internal_mutable_delegator_address() {
  
  return delegator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgWithdrawDelegatorReward::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.delegator_address)
  return delegator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgWithdrawDelegatorReward::set_allocated_delegator_address(std::string* delegator_address) {
  if (delegator_address != nullptr) {
    
  } else {
    
  }
  delegator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (delegator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    delegator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.delegator_address)
}

// string validator_address = 2;
inline void MsgWithdrawDelegatorReward::clear_validator_address() {
  validator_address_.ClearToEmpty();
}
inline const std::string& MsgWithdrawDelegatorReward::validator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.validator_address)
  return _internal_validator_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgWithdrawDelegatorReward::set_validator_address(ArgT0&& arg0, ArgT... args) {
 
 validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.validator_address)
}
inline std::string* MsgWithdrawDelegatorReward::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.validator_address)
  return _s;
}
inline const std::string& MsgWithdrawDelegatorReward::_internal_validator_address() const {
  return validator_address_.Get();
}
inline void MsgWithdrawDelegatorReward::_internal_set_validator_address(const std::string& value) {
  
  validator_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgWithdrawDelegatorReward::_internal_mutable_validator_address() {
  
  return validator_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgWithdrawDelegatorReward::release_validator_address() {
  // @@protoc_insertion_point(field_release:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.validator_address)
  return validator_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgWithdrawDelegatorReward::set_allocated_validator_address(std::string* validator_address) {
  if (validator_address != nullptr) {
    
  } else {
    
  }
  validator_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (validator_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    validator_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward.validator_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace distribution
}  // namespace cosmos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_distribution_5ftx_2eproto
