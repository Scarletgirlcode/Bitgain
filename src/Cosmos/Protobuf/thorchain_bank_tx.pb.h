// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thorchain_bank_tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_thorchain_5fbank_5ftx_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_thorchain_5fbank_5ftx_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "coin.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_thorchain_5fbank_5ftx_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_thorchain_5fbank_5ftx_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_thorchain_5fbank_5ftx_2eproto;
namespace types {
class Asset;
struct AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class Coin;
struct CoinDefaultTypeInternal;
extern CoinDefaultTypeInternal _Coin_default_instance_;
class MsgDeposit;
struct MsgDepositDefaultTypeInternal;
extern MsgDepositDefaultTypeInternal _MsgDeposit_default_instance_;
class MsgSend;
struct MsgSendDefaultTypeInternal;
extern MsgSendDefaultTypeInternal _MsgSend_default_instance_;
}  // namespace types
PROTOBUF_NAMESPACE_OPEN
template<> ::types::Asset* Arena::CreateMaybeMessage<::types::Asset>(Arena*);
template<> ::types::Coin* Arena::CreateMaybeMessage<::types::Coin>(Arena*);
template<> ::types::MsgDeposit* Arena::CreateMaybeMessage<::types::MsgDeposit>(Arena*);
template<> ::types::MsgSend* Arena::CreateMaybeMessage<::types::MsgSend>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace types {

// ===================================================================

class Asset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  ~Asset() override;
  explicit constexpr Asset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Asset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Asset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Asset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kTickerFieldNumber = 3,
    kSynthFieldNumber = 4,
  };
  // string chain = 1;
  void clear_chain();
  const std::string& chain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chain();
  PROTOBUF_NODISCARD std::string* release_chain();
  void set_allocated_chain(std::string* chain);
  private:
  const std::string& _internal_chain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain(const std::string& value);
  std::string* _internal_mutable_chain();
  public:

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string ticker = 3;
  void clear_ticker();
  const std::string& ticker() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticker(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* ticker);
  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(const std::string& value);
  std::string* _internal_mutable_ticker();
  public:

  // bool synth = 4;
  void clear_synth();
  bool synth() const;
  void set_synth(bool value);
  private:
  bool _internal_synth() const;
  void _internal_set_synth(bool value);
  public:

  // @@protoc_insertion_point(class_scope:types.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticker_;
  bool synth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thorchain_5fbank_5ftx_2eproto;
};
// -------------------------------------------------------------------

class Coin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Coin) */ {
 public:
  inline Coin() : Coin(nullptr) {}
  ~Coin() override;
  explicit constexpr Coin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coin(const Coin& from);
  Coin(Coin&& from) noexcept
    : Coin() {
    *this = ::std::move(from);
  }

  inline Coin& operator=(const Coin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coin& operator=(Coin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coin& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coin* internal_default_instance() {
    return reinterpret_cast<const Coin*>(
               &_Coin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Coin& a, Coin& b) {
    a.Swap(&b);
  }
  inline void Swap(Coin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Coin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Coin";
  }
  protected:
  explicit Coin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kAssetFieldNumber = 1,
    kDecimalsFieldNumber = 3,
  };
  // string amount = 2;
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // .types.Asset asset = 1;
  bool has_asset() const;
  private:
  bool _internal_has_asset() const;
  public:
  void clear_asset();
  const ::types::Asset& asset() const;
  PROTOBUF_NODISCARD ::types::Asset* release_asset();
  ::types::Asset* mutable_asset();
  void set_allocated_asset(::types::Asset* asset);
  private:
  const ::types::Asset& _internal_asset() const;
  ::types::Asset* _internal_mutable_asset();
  public:
  void unsafe_arena_set_allocated_asset(
      ::types::Asset* asset);
  ::types::Asset* unsafe_arena_release_asset();

  // int64 decimals = 3;
  void clear_decimals();
  int64_t decimals() const;
  void set_decimals(int64_t value);
  private:
  int64_t _internal_decimals() const;
  void _internal_set_decimals(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.Coin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::types::Asset* asset_;
  int64_t decimals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thorchain_5fbank_5ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.MsgSend) */ {
 public:
  inline MsgSend() : MsgSend(nullptr) {}
  ~MsgSend() override;
  explicit constexpr MsgSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSend(const MsgSend& from);
  MsgSend(MsgSend&& from) noexcept
    : MsgSend() {
    *this = ::std::move(from);
  }

  inline MsgSend& operator=(const MsgSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSend& operator=(MsgSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSend* internal_default_instance() {
    return reinterpret_cast<const MsgSend*>(
               &_MsgSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgSend& a, MsgSend& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgSend& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.MsgSend";
  }
  protected:
  explicit MsgSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 3,
    kFromAddressFieldNumber = 1,
    kToAddressFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 3;
  int amount_size() const;
  private:
  int _internal_amount_size() const;
  public:
  void clear_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_amount();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      amount() const;

  // bytes from_address = 1;
  void clear_from_address();
  const std::string& from_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_address();
  PROTOBUF_NODISCARD std::string* release_from_address();
  void set_allocated_from_address(std::string* from_address);
  private:
  const std::string& _internal_from_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_address(const std::string& value);
  std::string* _internal_mutable_from_address();
  public:

  // bytes to_address = 2;
  void clear_to_address();
  const std::string& to_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_address();
  PROTOBUF_NODISCARD std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);
  private:
  const std::string& _internal_to_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_address(const std::string& value);
  std::string* _internal_mutable_to_address();
  public:

  // @@protoc_insertion_point(class_scope:types.MsgSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thorchain_5fbank_5ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgDeposit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.MsgDeposit) */ {
 public:
  inline MsgDeposit() : MsgDeposit(nullptr) {}
  ~MsgDeposit() override;
  explicit constexpr MsgDeposit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgDeposit(const MsgDeposit& from);
  MsgDeposit(MsgDeposit&& from) noexcept
    : MsgDeposit() {
    *this = ::std::move(from);
  }

  inline MsgDeposit& operator=(const MsgDeposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDeposit& operator=(MsgDeposit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgDeposit& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgDeposit* internal_default_instance() {
    return reinterpret_cast<const MsgDeposit*>(
               &_MsgDeposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgDeposit& a, MsgDeposit& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDeposit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDeposit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgDeposit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgDeposit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgDeposit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgDeposit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDeposit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.MsgDeposit";
  }
  protected:
  explicit MsgDeposit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinsFieldNumber = 1,
    kMemoFieldNumber = 2,
    kSignerFieldNumber = 3,
  };
  // repeated .types.Coin coins = 1;
  int coins_size() const;
  private:
  int _internal_coins_size() const;
  public:
  void clear_coins();
  ::types::Coin* mutable_coins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Coin >*
      mutable_coins();
  private:
  const ::types::Coin& _internal_coins(int index) const;
  ::types::Coin* _internal_add_coins();
  public:
  const ::types::Coin& coins(int index) const;
  ::types::Coin* add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Coin >&
      coins() const;

  // string memo = 2;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes signer = 3;
  void clear_signer();
  const std::string& signer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signer();
  PROTOBUF_NODISCARD std::string* release_signer();
  void set_allocated_signer(std::string* signer);
  private:
  const std::string& _internal_signer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signer(const std::string& value);
  std::string* _internal_mutable_signer();
  public:

  // @@protoc_insertion_point(class_scope:types.MsgDeposit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Coin > coins_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thorchain_5fbank_5ftx_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Asset

// string chain = 1;
inline void Asset::clear_chain() {
  chain_.ClearToEmpty();
}
inline const std::string& Asset::chain() const {
  // @@protoc_insertion_point(field_get:types.Asset.chain)
  return _internal_chain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_chain(ArgT0&& arg0, ArgT... args) {
 
 chain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.Asset.chain)
}
inline std::string* Asset::mutable_chain() {
  std::string* _s = _internal_mutable_chain();
  // @@protoc_insertion_point(field_mutable:types.Asset.chain)
  return _s;
}
inline const std::string& Asset::_internal_chain() const {
  return chain_.Get();
}
inline void Asset::_internal_set_chain(const std::string& value) {
  
  chain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_chain() {
  
  return chain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_chain() {
  // @@protoc_insertion_point(field_release:types.Asset.chain)
  return chain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_chain(std::string* chain) {
  if (chain != nullptr) {
    
  } else {
    
  }
  chain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.Asset.chain)
}

// string symbol = 2;
inline void Asset::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& Asset::symbol() const {
  // @@protoc_insertion_point(field_get:types.Asset.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.Asset.symbol)
}
inline std::string* Asset::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:types.Asset.symbol)
  return _s;
}
inline const std::string& Asset::_internal_symbol() const {
  return symbol_.Get();
}
inline void Asset::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_symbol() {
  // @@protoc_insertion_point(field_release:types.Asset.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (symbol_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    symbol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.Asset.symbol)
}

// string ticker = 3;
inline void Asset::clear_ticker() {
  ticker_.ClearToEmpty();
}
inline const std::string& Asset::ticker() const {
  // @@protoc_insertion_point(field_get:types.Asset.ticker)
  return _internal_ticker();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_ticker(ArgT0&& arg0, ArgT... args) {
 
 ticker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.Asset.ticker)
}
inline std::string* Asset::mutable_ticker() {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:types.Asset.ticker)
  return _s;
}
inline const std::string& Asset::_internal_ticker() const {
  return ticker_.Get();
}
inline void Asset::_internal_set_ticker(const std::string& value) {
  
  ticker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_ticker() {
  
  return ticker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_ticker() {
  // @@protoc_insertion_point(field_release:types.Asset.ticker)
  return ticker_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_ticker(std::string* ticker) {
  if (ticker != nullptr) {
    
  } else {
    
  }
  ticker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticker,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ticker_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ticker_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.Asset.ticker)
}

// bool synth = 4;
inline void Asset::clear_synth() {
  synth_ = false;
}
inline bool Asset::_internal_synth() const {
  return synth_;
}
inline bool Asset::synth() const {
  // @@protoc_insertion_point(field_get:types.Asset.synth)
  return _internal_synth();
}
inline void Asset::_internal_set_synth(bool value) {
  
  synth_ = value;
}
inline void Asset::set_synth(bool value) {
  _internal_set_synth(value);
  // @@protoc_insertion_point(field_set:types.Asset.synth)
}

// -------------------------------------------------------------------

// Coin

// .types.Asset asset = 1;
inline bool Coin::_internal_has_asset() const {
  return this != internal_default_instance() && asset_ != nullptr;
}
inline bool Coin::has_asset() const {
  return _internal_has_asset();
}
inline void Coin::clear_asset() {
  if (GetArenaForAllocation() == nullptr && asset_ != nullptr) {
    delete asset_;
  }
  asset_ = nullptr;
}
inline const ::types::Asset& Coin::_internal_asset() const {
  const ::types::Asset* p = asset_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Asset&>(
      ::types::_Asset_default_instance_);
}
inline const ::types::Asset& Coin::asset() const {
  // @@protoc_insertion_point(field_get:types.Coin.asset)
  return _internal_asset();
}
inline void Coin::unsafe_arena_set_allocated_asset(
    ::types::Asset* asset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asset_);
  }
  asset_ = asset;
  if (asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.Coin.asset)
}
inline ::types::Asset* Coin::release_asset() {
  
  ::types::Asset* temp = asset_;
  asset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Asset* Coin::unsafe_arena_release_asset() {
  // @@protoc_insertion_point(field_release:types.Coin.asset)
  
  ::types::Asset* temp = asset_;
  asset_ = nullptr;
  return temp;
}
inline ::types::Asset* Coin::_internal_mutable_asset() {
  
  if (asset_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Asset>(GetArenaForAllocation());
    asset_ = p;
  }
  return asset_;
}
inline ::types::Asset* Coin::mutable_asset() {
  ::types::Asset* _msg = _internal_mutable_asset();
  // @@protoc_insertion_point(field_mutable:types.Coin.asset)
  return _msg;
}
inline void Coin::set_allocated_asset(::types::Asset* asset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete asset_;
  }
  if (asset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::types::Asset>::GetOwningArena(asset);
    if (message_arena != submessage_arena) {
      asset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asset, submessage_arena);
    }
    
  } else {
    
  }
  asset_ = asset;
  // @@protoc_insertion_point(field_set_allocated:types.Coin.asset)
}

// string amount = 2;
inline void Coin::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& Coin::amount() const {
  // @@protoc_insertion_point(field_get:types.Coin.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Coin::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.Coin.amount)
}
inline std::string* Coin::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:types.Coin.amount)
  return _s;
}
inline const std::string& Coin::_internal_amount() const {
  return amount_.Get();
}
inline void Coin::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Coin::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Coin::release_amount() {
  // @@protoc_insertion_point(field_release:types.Coin.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Coin::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (amount_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    amount_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.Coin.amount)
}

// int64 decimals = 3;
inline void Coin::clear_decimals() {
  decimals_ = int64_t{0};
}
inline int64_t Coin::_internal_decimals() const {
  return decimals_;
}
inline int64_t Coin::decimals() const {
  // @@protoc_insertion_point(field_get:types.Coin.decimals)
  return _internal_decimals();
}
inline void Coin::_internal_set_decimals(int64_t value) {
  
  decimals_ = value;
}
inline void Coin::set_decimals(int64_t value) {
  _internal_set_decimals(value);
  // @@protoc_insertion_point(field_set:types.Coin.decimals)
}

// -------------------------------------------------------------------

// MsgSend

// bytes from_address = 1;
inline void MsgSend::clear_from_address() {
  from_address_.ClearToEmpty();
}
inline const std::string& MsgSend::from_address() const {
  // @@protoc_insertion_point(field_get:types.MsgSend.from_address)
  return _internal_from_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgSend::set_from_address(ArgT0&& arg0, ArgT... args) {
 
 from_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.MsgSend.from_address)
}
inline std::string* MsgSend::mutable_from_address() {
  std::string* _s = _internal_mutable_from_address();
  // @@protoc_insertion_point(field_mutable:types.MsgSend.from_address)
  return _s;
}
inline const std::string& MsgSend::_internal_from_address() const {
  return from_address_.Get();
}
inline void MsgSend::_internal_set_from_address(const std::string& value) {
  
  from_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgSend::_internal_mutable_from_address() {
  
  return from_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgSend::release_from_address() {
  // @@protoc_insertion_point(field_release:types.MsgSend.from_address)
  return from_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgSend::set_allocated_from_address(std::string* from_address) {
  if (from_address != nullptr) {
    
  } else {
    
  }
  from_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    from_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.MsgSend.from_address)
}

// bytes to_address = 2;
inline void MsgSend::clear_to_address() {
  to_address_.ClearToEmpty();
}
inline const std::string& MsgSend::to_address() const {
  // @@protoc_insertion_point(field_get:types.MsgSend.to_address)
  return _internal_to_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgSend::set_to_address(ArgT0&& arg0, ArgT... args) {
 
 to_address_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.MsgSend.to_address)
}
inline std::string* MsgSend::mutable_to_address() {
  std::string* _s = _internal_mutable_to_address();
  // @@protoc_insertion_point(field_mutable:types.MsgSend.to_address)
  return _s;
}
inline const std::string& MsgSend::_internal_to_address() const {
  return to_address_.Get();
}
inline void MsgSend::_internal_set_to_address(const std::string& value) {
  
  to_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgSend::_internal_mutable_to_address() {
  
  return to_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgSend::release_to_address() {
  // @@protoc_insertion_point(field_release:types.MsgSend.to_address)
  return to_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgSend::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (to_address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    to_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.MsgSend.to_address)
}

// repeated .cosmos.base.v1beta1.Coin amount = 3;
inline int MsgSend::_internal_amount_size() const {
  return amount_.size();
}
inline int MsgSend::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* MsgSend::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:types.MsgSend.amount)
  return amount_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
MsgSend::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:types.MsgSend.amount)
  return &amount_;
}
inline const ::cosmos::base::v1beta1::Coin& MsgSend::_internal_amount(int index) const {
  return amount_.Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& MsgSend::amount(int index) const {
  // @@protoc_insertion_point(field_get:types.MsgSend.amount)
  return _internal_amount(index);
}
inline ::cosmos::base::v1beta1::Coin* MsgSend::_internal_add_amount() {
  return amount_.Add();
}
inline ::cosmos::base::v1beta1::Coin* MsgSend::add_amount() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_amount();
  // @@protoc_insertion_point(field_add:types.MsgSend.amount)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
MsgSend::amount() const {
  // @@protoc_insertion_point(field_list:types.MsgSend.amount)
  return amount_;
}

// -------------------------------------------------------------------

// MsgDeposit

// repeated .types.Coin coins = 1;
inline int MsgDeposit::_internal_coins_size() const {
  return coins_.size();
}
inline int MsgDeposit::coins_size() const {
  return _internal_coins_size();
}
inline void MsgDeposit::clear_coins() {
  coins_.Clear();
}
inline ::types::Coin* MsgDeposit::mutable_coins(int index) {
  // @@protoc_insertion_point(field_mutable:types.MsgDeposit.coins)
  return coins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Coin >*
MsgDeposit::mutable_coins() {
  // @@protoc_insertion_point(field_mutable_list:types.MsgDeposit.coins)
  return &coins_;
}
inline const ::types::Coin& MsgDeposit::_internal_coins(int index) const {
  return coins_.Get(index);
}
inline const ::types::Coin& MsgDeposit::coins(int index) const {
  // @@protoc_insertion_point(field_get:types.MsgDeposit.coins)
  return _internal_coins(index);
}
inline ::types::Coin* MsgDeposit::_internal_add_coins() {
  return coins_.Add();
}
inline ::types::Coin* MsgDeposit::add_coins() {
  ::types::Coin* _add = _internal_add_coins();
  // @@protoc_insertion_point(field_add:types.MsgDeposit.coins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Coin >&
MsgDeposit::coins() const {
  // @@protoc_insertion_point(field_list:types.MsgDeposit.coins)
  return coins_;
}

// string memo = 2;
inline void MsgDeposit::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& MsgDeposit::memo() const {
  // @@protoc_insertion_point(field_get:types.MsgDeposit.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgDeposit::set_memo(ArgT0&& arg0, ArgT... args) {
 
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.MsgDeposit.memo)
}
inline std::string* MsgDeposit::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:types.MsgDeposit.memo)
  return _s;
}
inline const std::string& MsgDeposit::_internal_memo() const {
  return memo_.Get();
}
inline void MsgDeposit::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgDeposit::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgDeposit::release_memo() {
  // @@protoc_insertion_point(field_release:types.MsgDeposit.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgDeposit::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.MsgDeposit.memo)
}

// bytes signer = 3;
inline void MsgDeposit::clear_signer() {
  signer_.ClearToEmpty();
}
inline const std::string& MsgDeposit::signer() const {
  // @@protoc_insertion_point(field_get:types.MsgDeposit.signer)
  return _internal_signer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgDeposit::set_signer(ArgT0&& arg0, ArgT... args) {
 
 signer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.MsgDeposit.signer)
}
inline std::string* MsgDeposit::mutable_signer() {
  std::string* _s = _internal_mutable_signer();
  // @@protoc_insertion_point(field_mutable:types.MsgDeposit.signer)
  return _s;
}
inline const std::string& MsgDeposit::_internal_signer() const {
  return signer_.Get();
}
inline void MsgDeposit::_internal_set_signer(const std::string& value) {
  
  signer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgDeposit::_internal_mutable_signer() {
  
  return signer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgDeposit::release_signer() {
  // @@protoc_insertion_point(field_release:types.MsgDeposit.signer)
  return signer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgDeposit::set_allocated_signer(std::string* signer) {
  if (signer != nullptr) {
    
  } else {
    
  }
  signer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.MsgDeposit.signer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_thorchain_5fbank_5ftx_2eproto
