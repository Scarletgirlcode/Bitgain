// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc_applications_transfer_tx.proto

#include "ibc_applications_transfer_tx.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {
constexpr MsgTransfer::MsgTransfer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_port_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_channel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , receiver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_(nullptr)
  , timeout_height_(nullptr)
  , timeout_timestamp_(uint64_t{0u}){}
struct MsgTransferDefaultTypeInternal {
  constexpr MsgTransferDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgTransferDefaultTypeInternal() {}
  union {
    MsgTransfer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgTransferDefaultTypeInternal _MsgTransfer_default_instance_;
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ibc_5fapplications_5ftransfer_5ftx_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ibc_5fapplications_5ftransfer_5ftx_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ibc_5fapplications_5ftransfer_5ftx_2eproto = nullptr;

const uint32_t TableStruct_ibc_5fapplications_5ftransfer_5ftx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::MsgTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::MsgTransfer, source_port_),
  PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::MsgTransfer, source_channel_),
  PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::MsgTransfer, token_),
  PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::MsgTransfer, sender_),
  PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::MsgTransfer, receiver_),
  PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::MsgTransfer, timeout_height_),
  PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::MsgTransfer, timeout_timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ibc::applications::transfer::v1::MsgTransfer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ibc::applications::transfer::v1::_MsgTransfer_default_instance_),
};

const char descriptor_table_protodef_ibc_5fapplications_5ftransfer_5ftx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"ibc_applications_transfer_tx.proto\022\034ib"
  "c.applications.transfer.v1\032\ncoin.proto\032\025"
  "ibc_core_client.proto\"\325\001\n\013MsgTransfer\022\023\n"
  "\013source_port\030\001 \001(\t\022\026\n\016source_channel\030\002 \001"
  "(\t\022(\n\005token\030\003 \001(\0132\031.cosmos.base.v1beta1."
  "Coin\022\016\n\006sender\030\004 \001(\t\022\020\n\010receiver\030\005 \001(\t\0222"
  "\n\016timeout_height\030\006 \001(\0132\032.ibc.core.client"
  ".v1.Height\022\031\n\021timeout_timestamp\030\007 \001(\004b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ibc_5fapplications_5ftransfer_5ftx_2eproto_deps[2] = {
  &::descriptor_table_coin_2eproto,
  &::descriptor_table_ibc_5fcore_5fclient_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ibc_5fapplications_5ftransfer_5ftx_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ibc_5fapplications_5ftransfer_5ftx_2eproto = {
  false, false, 325, descriptor_table_protodef_ibc_5fapplications_5ftransfer_5ftx_2eproto, "ibc_applications_transfer_tx.proto", 
  &descriptor_table_ibc_5fapplications_5ftransfer_5ftx_2eproto_once, descriptor_table_ibc_5fapplications_5ftransfer_5ftx_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_ibc_5fapplications_5ftransfer_5ftx_2eproto::offsets,
  file_level_metadata_ibc_5fapplications_5ftransfer_5ftx_2eproto, file_level_enum_descriptors_ibc_5fapplications_5ftransfer_5ftx_2eproto, file_level_service_descriptors_ibc_5fapplications_5ftransfer_5ftx_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ibc_5fapplications_5ftransfer_5ftx_2eproto_getter() {
  return &descriptor_table_ibc_5fapplications_5ftransfer_5ftx_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ibc_5fapplications_5ftransfer_5ftx_2eproto(&descriptor_table_ibc_5fapplications_5ftransfer_5ftx_2eproto);
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {

// ===================================================================

class MsgTransfer::_Internal {
 public:
  static const ::cosmos::base::v1beta1::Coin& token(const MsgTransfer* msg);
  static const ::ibc::core::client::v1::Height& timeout_height(const MsgTransfer* msg);
};

const ::cosmos::base::v1beta1::Coin&
MsgTransfer::_Internal::token(const MsgTransfer* msg) {
  return *msg->token_;
}
const ::ibc::core::client::v1::Height&
MsgTransfer::_Internal::timeout_height(const MsgTransfer* msg) {
  return *msg->timeout_height_;
}
void MsgTransfer::clear_token() {
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
void MsgTransfer::clear_timeout_height() {
  if (GetArenaForAllocation() == nullptr && timeout_height_ != nullptr) {
    delete timeout_height_;
  }
  timeout_height_ = nullptr;
}
MsgTransfer::MsgTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ibc.applications.transfer.v1.MsgTransfer)
}
MsgTransfer::MsgTransfer(const MsgTransfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_port().empty()) {
    source_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_port(), 
      GetArenaForAllocation());
  }
  source_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_channel().empty()) {
    source_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_channel(), 
      GetArenaForAllocation());
  }
  sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender(), 
      GetArenaForAllocation());
  }
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_receiver(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_token()) {
    token_ = new ::cosmos::base::v1beta1::Coin(*from.token_);
  } else {
    token_ = nullptr;
  }
  if (from._internal_has_timeout_height()) {
    timeout_height_ = new ::ibc::core::client::v1::Height(*from.timeout_height_);
  } else {
    timeout_height_ = nullptr;
  }
  timeout_timestamp_ = from.timeout_timestamp_;
  // @@protoc_insertion_point(copy_constructor:ibc.applications.transfer.v1.MsgTransfer)
}

inline void MsgTransfer::SharedCtor() {
source_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timeout_timestamp_) -
    reinterpret_cast<char*>(&token_)) + sizeof(timeout_timestamp_));
}

MsgTransfer::~MsgTransfer() {
  // @@protoc_insertion_point(destructor:ibc.applications.transfer.v1.MsgTransfer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MsgTransfer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete token_;
  if (this != internal_default_instance()) delete timeout_height_;
}

void MsgTransfer::ArenaDtor(void* object) {
  MsgTransfer* _this = reinterpret_cast< MsgTransfer* >(object);
  (void)_this;
}
void MsgTransfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.transfer.v1.MsgTransfer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_port_.ClearToEmpty();
  source_channel_.ClearToEmpty();
  sender_.ClearToEmpty();
  receiver_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timeout_height_ != nullptr) {
    delete timeout_height_;
  }
  timeout_height_ = nullptr;
  timeout_timestamp_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTransfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string source_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_port();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibc.applications.transfer.v1.MsgTransfer.source_port"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string source_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibc.applications.transfer.v1.MsgTransfer.source_channel"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .cosmos.base.v1beta1.Coin token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sender();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibc.applications.transfer.v1.MsgTransfer.sender"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string receiver = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_receiver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ibc.applications.transfer.v1.MsgTransfer.receiver"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ibc.core.client.v1.Height timeout_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout_height(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timeout_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          timeout_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgTransfer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.transfer.v1.MsgTransfer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_port = 1;
  if (!this->_internal_source_port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_port().data(), static_cast<int>(this->_internal_source_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibc.applications.transfer.v1.MsgTransfer.source_port");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_port(), target);
  }

  // string source_channel = 2;
  if (!this->_internal_source_channel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_channel().data(), static_cast<int>(this->_internal_source_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibc.applications.transfer.v1.MsgTransfer.source_channel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_channel(), target);
  }

  // .cosmos.base.v1beta1.Coin token = 3;
  if (this->_internal_has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::token(this), target, stream);
  }

  // string sender = 4;
  if (!this->_internal_sender().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibc.applications.transfer.v1.MsgTransfer.sender");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender(), target);
  }

  // string receiver = 5;
  if (!this->_internal_receiver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ibc.applications.transfer.v1.MsgTransfer.receiver");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_receiver(), target);
  }

  // .ibc.core.client.v1.Height timeout_height = 6;
  if (this->_internal_has_timeout_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timeout_height(this), target, stream);
  }

  // uint64 timeout_timestamp = 7;
  if (this->_internal_timeout_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_timeout_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.transfer.v1.MsgTransfer)
  return target;
}

size_t MsgTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.transfer.v1.MsgTransfer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_port = 1;
  if (!this->_internal_source_port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_port());
  }

  // string source_channel = 2;
  if (!this->_internal_source_channel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_channel());
  }

  // string sender = 4;
  if (!this->_internal_sender().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender());
  }

  // string receiver = 5;
  if (!this->_internal_receiver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  // .cosmos.base.v1beta1.Coin token = 3;
  if (this->_internal_has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  // .ibc.core.client.v1.Height timeout_height = 6;
  if (this->_internal_has_timeout_height()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timeout_height_);
  }

  // uint64 timeout_timestamp = 7;
  if (this->_internal_timeout_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timeout_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgTransfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MsgTransfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgTransfer::GetClassData() const { return &_class_data_; }

void MsgTransfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MsgTransfer *>(to)->MergeFrom(
      static_cast<const MsgTransfer &>(from));
}


void MsgTransfer::MergeFrom(const MsgTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.transfer.v1.MsgTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_port().empty()) {
    _internal_set_source_port(from._internal_source_port());
  }
  if (!from._internal_source_channel().empty()) {
    _internal_set_source_channel(from._internal_source_channel());
  }
  if (!from._internal_sender().empty()) {
    _internal_set_sender(from._internal_sender());
  }
  if (!from._internal_receiver().empty()) {
    _internal_set_receiver(from._internal_receiver());
  }
  if (from._internal_has_token()) {
    _internal_mutable_token()->::cosmos::base::v1beta1::Coin::MergeFrom(from._internal_token());
  }
  if (from._internal_has_timeout_height()) {
    _internal_mutable_timeout_height()->::ibc::core::client::v1::Height::MergeFrom(from._internal_timeout_height());
  }
  if (from._internal_timeout_timestamp() != 0) {
    _internal_set_timeout_timestamp(from._internal_timeout_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgTransfer::CopyFrom(const MsgTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.transfer.v1.MsgTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransfer::IsInitialized() const {
  return true;
}

void MsgTransfer::InternalSwap(MsgTransfer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_port_, lhs_arena,
      &other->source_port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_channel_, lhs_arena,
      &other->source_channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sender_, lhs_arena,
      &other->sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &receiver_, lhs_arena,
      &other->receiver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTransfer, timeout_timestamp_)
      + sizeof(MsgTransfer::timeout_timestamp_)
      - PROTOBUF_FIELD_OFFSET(MsgTransfer, token_)>(
          reinterpret_cast<char*>(&token_),
          reinterpret_cast<char*>(&other->token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTransfer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ibc_5fapplications_5ftransfer_5ftx_2eproto_getter, &descriptor_table_ibc_5fapplications_5ftransfer_5ftx_2eproto_once,
      file_level_metadata_ibc_5fapplications_5ftransfer_5ftx_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::applications::transfer::v1::MsgTransfer* Arena::CreateMaybeMessage< ::ibc::applications::transfer::v1::MsgTransfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::transfer::v1::MsgTransfer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
