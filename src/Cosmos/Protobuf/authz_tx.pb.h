// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authz_tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_authz_5ftx_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_authz_5ftx_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_authz_5ftx_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_authz_5ftx_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_authz_5ftx_2eproto;
namespace cosmos {
namespace authz {
namespace v1beta1 {
class Grant;
struct GrantDefaultTypeInternal;
extern GrantDefaultTypeInternal _Grant_default_instance_;
class MsgGrant;
struct MsgGrantDefaultTypeInternal;
extern MsgGrantDefaultTypeInternal _MsgGrant_default_instance_;
class MsgRevoke;
struct MsgRevokeDefaultTypeInternal;
extern MsgRevokeDefaultTypeInternal _MsgRevoke_default_instance_;
}  // namespace v1beta1
}  // namespace authz
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> ::cosmos::authz::v1beta1::Grant* Arena::CreateMaybeMessage<::cosmos::authz::v1beta1::Grant>(Arena*);
template<> ::cosmos::authz::v1beta1::MsgGrant* Arena::CreateMaybeMessage<::cosmos::authz::v1beta1::MsgGrant>(Arena*);
template<> ::cosmos::authz::v1beta1::MsgRevoke* Arena::CreateMaybeMessage<::cosmos::authz::v1beta1::MsgRevoke>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cosmos {
namespace authz {
namespace v1beta1 {

// ===================================================================

class Grant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.authz.v1beta1.Grant) */ {
 public:
  inline Grant() : Grant(nullptr) {}
  ~Grant() override;
  explicit constexpr Grant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Grant(const Grant& from);
  Grant(Grant&& from) noexcept
    : Grant() {
    *this = ::std::move(from);
  }

  inline Grant& operator=(const Grant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grant& operator=(Grant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Grant& default_instance() {
    return *internal_default_instance();
  }
  static inline const Grant* internal_default_instance() {
    return reinterpret_cast<const Grant*>(
               &_Grant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Grant& a, Grant& b) {
    a.Swap(&b);
  }
  inline void Swap(Grant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Grant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Grant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Grant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Grant& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.authz.v1beta1.Grant";
  }
  protected:
  explicit Grant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorizationFieldNumber = 1,
    kExpirationFieldNumber = 2,
  };
  // .google.protobuf.Any authorization = 1;
  bool has_authorization() const;
  private:
  bool _internal_has_authorization() const;
  public:
  void clear_authorization();
  const ::PROTOBUF_NAMESPACE_ID::Any& authorization() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_authorization();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_authorization();
  void set_allocated_authorization(::PROTOBUF_NAMESPACE_ID::Any* authorization);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_authorization() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_authorization();
  public:
  void unsafe_arena_set_allocated_authorization(
      ::PROTOBUF_NAMESPACE_ID::Any* authorization);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_authorization();

  // .google.protobuf.Timestamp expiration = 2;
  bool has_expiration() const;
  private:
  bool _internal_has_expiration() const;
  public:
  void clear_expiration();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration();
  void set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration();
  public:
  void unsafe_arena_set_allocated_expiration(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration();

  // @@protoc_insertion_point(class_scope:cosmos.authz.v1beta1.Grant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Any* authorization_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authz_5ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgGrant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.authz.v1beta1.MsgGrant) */ {
 public:
  inline MsgGrant() : MsgGrant(nullptr) {}
  ~MsgGrant() override;
  explicit constexpr MsgGrant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgGrant(const MsgGrant& from);
  MsgGrant(MsgGrant&& from) noexcept
    : MsgGrant() {
    *this = ::std::move(from);
  }

  inline MsgGrant& operator=(const MsgGrant& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgGrant& operator=(MsgGrant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgGrant& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgGrant* internal_default_instance() {
    return reinterpret_cast<const MsgGrant*>(
               &_MsgGrant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgGrant& a, MsgGrant& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgGrant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgGrant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgGrant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgGrant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgGrant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgGrant& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgGrant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.authz.v1beta1.MsgGrant";
  }
  protected:
  explicit MsgGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGranterFieldNumber = 1,
    kGranteeFieldNumber = 2,
    kGrantFieldNumber = 3,
  };
  // string granter = 1;
  void clear_granter();
  const std::string& granter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_granter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_granter();
  PROTOBUF_NODISCARD std::string* release_granter();
  void set_allocated_granter(std::string* granter);
  private:
  const std::string& _internal_granter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_granter(const std::string& value);
  std::string* _internal_mutable_granter();
  public:

  // string grantee = 2;
  void clear_grantee();
  const std::string& grantee() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_grantee(ArgT0&& arg0, ArgT... args);
  std::string* mutable_grantee();
  PROTOBUF_NODISCARD std::string* release_grantee();
  void set_allocated_grantee(std::string* grantee);
  private:
  const std::string& _internal_grantee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grantee(const std::string& value);
  std::string* _internal_mutable_grantee();
  public:

  // .cosmos.authz.v1beta1.Grant grant = 3;
  bool has_grant() const;
  private:
  bool _internal_has_grant() const;
  public:
  void clear_grant();
  const ::cosmos::authz::v1beta1::Grant& grant() const;
  PROTOBUF_NODISCARD ::cosmos::authz::v1beta1::Grant* release_grant();
  ::cosmos::authz::v1beta1::Grant* mutable_grant();
  void set_allocated_grant(::cosmos::authz::v1beta1::Grant* grant);
  private:
  const ::cosmos::authz::v1beta1::Grant& _internal_grant() const;
  ::cosmos::authz::v1beta1::Grant* _internal_mutable_grant();
  public:
  void unsafe_arena_set_allocated_grant(
      ::cosmos::authz::v1beta1::Grant* grant);
  ::cosmos::authz::v1beta1::Grant* unsafe_arena_release_grant();

  // @@protoc_insertion_point(class_scope:cosmos.authz.v1beta1.MsgGrant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grantee_;
  ::cosmos::authz::v1beta1::Grant* grant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authz_5ftx_2eproto;
};
// -------------------------------------------------------------------

class MsgRevoke final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.authz.v1beta1.MsgRevoke) */ {
 public:
  inline MsgRevoke() : MsgRevoke(nullptr) {}
  ~MsgRevoke() override;
  explicit constexpr MsgRevoke(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRevoke(const MsgRevoke& from);
  MsgRevoke(MsgRevoke&& from) noexcept
    : MsgRevoke() {
    *this = ::std::move(from);
  }

  inline MsgRevoke& operator=(const MsgRevoke& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRevoke& operator=(MsgRevoke&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRevoke& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRevoke* internal_default_instance() {
    return reinterpret_cast<const MsgRevoke*>(
               &_MsgRevoke_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgRevoke& a, MsgRevoke& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRevoke* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRevoke* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRevoke* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRevoke>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRevoke& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgRevoke& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRevoke* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cosmos.authz.v1beta1.MsgRevoke";
  }
  protected:
  explicit MsgRevoke(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGranterFieldNumber = 1,
    kGranteeFieldNumber = 2,
    kMsgTypeUrlFieldNumber = 3,
  };
  // string granter = 1;
  void clear_granter();
  const std::string& granter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_granter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_granter();
  PROTOBUF_NODISCARD std::string* release_granter();
  void set_allocated_granter(std::string* granter);
  private:
  const std::string& _internal_granter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_granter(const std::string& value);
  std::string* _internal_mutable_granter();
  public:

  // string grantee = 2;
  void clear_grantee();
  const std::string& grantee() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_grantee(ArgT0&& arg0, ArgT... args);
  std::string* mutable_grantee();
  PROTOBUF_NODISCARD std::string* release_grantee();
  void set_allocated_grantee(std::string* grantee);
  private:
  const std::string& _internal_grantee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grantee(const std::string& value);
  std::string* _internal_mutable_grantee();
  public:

  // string msg_type_url = 3;
  void clear_msg_type_url();
  const std::string& msg_type_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_type_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_type_url();
  PROTOBUF_NODISCARD std::string* release_msg_type_url();
  void set_allocated_msg_type_url(std::string* msg_type_url);
  private:
  const std::string& _internal_msg_type_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_type_url(const std::string& value);
  std::string* _internal_mutable_msg_type_url();
  public:

  // @@protoc_insertion_point(class_scope:cosmos.authz.v1beta1.MsgRevoke)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grantee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_type_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authz_5ftx_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Grant

// .google.protobuf.Any authorization = 1;
inline bool Grant::_internal_has_authorization() const {
  return this != internal_default_instance() && authorization_ != nullptr;
}
inline bool Grant::has_authorization() const {
  return _internal_has_authorization();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Grant::_internal_authorization() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = authorization_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Grant::authorization() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.Grant.authorization)
  return _internal_authorization();
}
inline void Grant::unsafe_arena_set_allocated_authorization(
    ::PROTOBUF_NAMESPACE_ID::Any* authorization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authorization_);
  }
  authorization_ = authorization;
  if (authorization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.authz.v1beta1.Grant.authorization)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::release_authorization() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = authorization_;
  authorization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::unsafe_arena_release_authorization() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.Grant.authorization)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = authorization_;
  authorization_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::_internal_mutable_authorization() {
  
  if (authorization_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    authorization_ = p;
  }
  return authorization_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::mutable_authorization() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_authorization();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.Grant.authorization)
  return _msg;
}
inline void Grant::set_allocated_authorization(::PROTOBUF_NAMESPACE_ID::Any* authorization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(authorization_);
  }
  if (authorization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authorization));
    if (message_arena != submessage_arena) {
      authorization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authorization, submessage_arena);
    }
    
  } else {
    
  }
  authorization_ = authorization;
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.Grant.authorization)
}

// .google.protobuf.Timestamp expiration = 2;
inline bool Grant::_internal_has_expiration() const {
  return this != internal_default_instance() && expiration_ != nullptr;
}
inline bool Grant::has_expiration() const {
  return _internal_has_expiration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Grant::_internal_expiration() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = expiration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Grant::expiration() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.Grant.expiration)
  return _internal_expiration();
}
inline void Grant::unsafe_arena_set_allocated_expiration(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_);
  }
  expiration_ = expiration;
  if (expiration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.authz.v1beta1.Grant.expiration)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Grant::release_expiration() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_;
  expiration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Grant::unsafe_arena_release_expiration() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.Grant.expiration)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_;
  expiration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Grant::_internal_mutable_expiration() {
  
  if (expiration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    expiration_ = p;
  }
  return expiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Grant::mutable_expiration() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expiration();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.Grant.expiration)
  return _msg;
}
inline void Grant::set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_);
  }
  if (expiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration));
    if (message_arena != submessage_arena) {
      expiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }
    
  } else {
    
  }
  expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.Grant.expiration)
}

// -------------------------------------------------------------------

// MsgGrant

// string granter = 1;
inline void MsgGrant::clear_granter() {
  granter_.ClearToEmpty();
}
inline const std::string& MsgGrant::granter() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.MsgGrant.granter)
  return _internal_granter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgGrant::set_granter(ArgT0&& arg0, ArgT... args) {
 
 granter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.authz.v1beta1.MsgGrant.granter)
}
inline std::string* MsgGrant::mutable_granter() {
  std::string* _s = _internal_mutable_granter();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.MsgGrant.granter)
  return _s;
}
inline const std::string& MsgGrant::_internal_granter() const {
  return granter_.Get();
}
inline void MsgGrant::_internal_set_granter(const std::string& value) {
  
  granter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgGrant::_internal_mutable_granter() {
  
  return granter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgGrant::release_granter() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.MsgGrant.granter)
  return granter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgGrant::set_allocated_granter(std::string* granter) {
  if (granter != nullptr) {
    
  } else {
    
  }
  granter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), granter,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (granter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    granter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.MsgGrant.granter)
}

// string grantee = 2;
inline void MsgGrant::clear_grantee() {
  grantee_.ClearToEmpty();
}
inline const std::string& MsgGrant::grantee() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.MsgGrant.grantee)
  return _internal_grantee();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgGrant::set_grantee(ArgT0&& arg0, ArgT... args) {
 
 grantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.authz.v1beta1.MsgGrant.grantee)
}
inline std::string* MsgGrant::mutable_grantee() {
  std::string* _s = _internal_mutable_grantee();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.MsgGrant.grantee)
  return _s;
}
inline const std::string& MsgGrant::_internal_grantee() const {
  return grantee_.Get();
}
inline void MsgGrant::_internal_set_grantee(const std::string& value) {
  
  grantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgGrant::_internal_mutable_grantee() {
  
  return grantee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgGrant::release_grantee() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.MsgGrant.grantee)
  return grantee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgGrant::set_allocated_grantee(std::string* grantee) {
  if (grantee != nullptr) {
    
  } else {
    
  }
  grantee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grantee,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (grantee_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    grantee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.MsgGrant.grantee)
}

// .cosmos.authz.v1beta1.Grant grant = 3;
inline bool MsgGrant::_internal_has_grant() const {
  return this != internal_default_instance() && grant_ != nullptr;
}
inline bool MsgGrant::has_grant() const {
  return _internal_has_grant();
}
inline void MsgGrant::clear_grant() {
  if (GetArenaForAllocation() == nullptr && grant_ != nullptr) {
    delete grant_;
  }
  grant_ = nullptr;
}
inline const ::cosmos::authz::v1beta1::Grant& MsgGrant::_internal_grant() const {
  const ::cosmos::authz::v1beta1::Grant* p = grant_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::authz::v1beta1::Grant&>(
      ::cosmos::authz::v1beta1::_Grant_default_instance_);
}
inline const ::cosmos::authz::v1beta1::Grant& MsgGrant::grant() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.MsgGrant.grant)
  return _internal_grant();
}
inline void MsgGrant::unsafe_arena_set_allocated_grant(
    ::cosmos::authz::v1beta1::Grant* grant) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grant_);
  }
  grant_ = grant;
  if (grant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.authz.v1beta1.MsgGrant.grant)
}
inline ::cosmos::authz::v1beta1::Grant* MsgGrant::release_grant() {
  
  ::cosmos::authz::v1beta1::Grant* temp = grant_;
  grant_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::authz::v1beta1::Grant* MsgGrant::unsafe_arena_release_grant() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.MsgGrant.grant)
  
  ::cosmos::authz::v1beta1::Grant* temp = grant_;
  grant_ = nullptr;
  return temp;
}
inline ::cosmos::authz::v1beta1::Grant* MsgGrant::_internal_mutable_grant() {
  
  if (grant_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::authz::v1beta1::Grant>(GetArenaForAllocation());
    grant_ = p;
  }
  return grant_;
}
inline ::cosmos::authz::v1beta1::Grant* MsgGrant::mutable_grant() {
  ::cosmos::authz::v1beta1::Grant* _msg = _internal_mutable_grant();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.MsgGrant.grant)
  return _msg;
}
inline void MsgGrant::set_allocated_grant(::cosmos::authz::v1beta1::Grant* grant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete grant_;
  }
  if (grant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::cosmos::authz::v1beta1::Grant>::GetOwningArena(grant);
    if (message_arena != submessage_arena) {
      grant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grant, submessage_arena);
    }
    
  } else {
    
  }
  grant_ = grant;
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.MsgGrant.grant)
}

// -------------------------------------------------------------------

// MsgRevoke

// string granter = 1;
inline void MsgRevoke::clear_granter() {
  granter_.ClearToEmpty();
}
inline const std::string& MsgRevoke::granter() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.MsgRevoke.granter)
  return _internal_granter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgRevoke::set_granter(ArgT0&& arg0, ArgT... args) {
 
 granter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.authz.v1beta1.MsgRevoke.granter)
}
inline std::string* MsgRevoke::mutable_granter() {
  std::string* _s = _internal_mutable_granter();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.MsgRevoke.granter)
  return _s;
}
inline const std::string& MsgRevoke::_internal_granter() const {
  return granter_.Get();
}
inline void MsgRevoke::_internal_set_granter(const std::string& value) {
  
  granter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgRevoke::_internal_mutable_granter() {
  
  return granter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgRevoke::release_granter() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.MsgRevoke.granter)
  return granter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgRevoke::set_allocated_granter(std::string* granter) {
  if (granter != nullptr) {
    
  } else {
    
  }
  granter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), granter,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (granter_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    granter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.MsgRevoke.granter)
}

// string grantee = 2;
inline void MsgRevoke::clear_grantee() {
  grantee_.ClearToEmpty();
}
inline const std::string& MsgRevoke::grantee() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.MsgRevoke.grantee)
  return _internal_grantee();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgRevoke::set_grantee(ArgT0&& arg0, ArgT... args) {
 
 grantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.authz.v1beta1.MsgRevoke.grantee)
}
inline std::string* MsgRevoke::mutable_grantee() {
  std::string* _s = _internal_mutable_grantee();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.MsgRevoke.grantee)
  return _s;
}
inline const std::string& MsgRevoke::_internal_grantee() const {
  return grantee_.Get();
}
inline void MsgRevoke::_internal_set_grantee(const std::string& value) {
  
  grantee_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgRevoke::_internal_mutable_grantee() {
  
  return grantee_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgRevoke::release_grantee() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.MsgRevoke.grantee)
  return grantee_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgRevoke::set_allocated_grantee(std::string* grantee) {
  if (grantee != nullptr) {
    
  } else {
    
  }
  grantee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grantee,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (grantee_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    grantee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.MsgRevoke.grantee)
}

// string msg_type_url = 3;
inline void MsgRevoke::clear_msg_type_url() {
  msg_type_url_.ClearToEmpty();
}
inline const std::string& MsgRevoke::msg_type_url() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.MsgRevoke.msg_type_url)
  return _internal_msg_type_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgRevoke::set_msg_type_url(ArgT0&& arg0, ArgT... args) {
 
 msg_type_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.authz.v1beta1.MsgRevoke.msg_type_url)
}
inline std::string* MsgRevoke::mutable_msg_type_url() {
  std::string* _s = _internal_mutable_msg_type_url();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.MsgRevoke.msg_type_url)
  return _s;
}
inline const std::string& MsgRevoke::_internal_msg_type_url() const {
  return msg_type_url_.Get();
}
inline void MsgRevoke::_internal_set_msg_type_url(const std::string& value) {
  
  msg_type_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgRevoke::_internal_mutable_msg_type_url() {
  
  return msg_type_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgRevoke::release_msg_type_url() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.MsgRevoke.msg_type_url)
  return msg_type_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgRevoke::set_allocated_msg_type_url(std::string* msg_type_url) {
  if (msg_type_url != nullptr) {
    
  } else {
    
  }
  msg_type_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_type_url,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_type_url_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_type_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.MsgRevoke.msg_type_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace authz
}  // namespace cosmos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_authz_5ftx_2eproto
