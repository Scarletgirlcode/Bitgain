// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc_applications_transfer_tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_5fapplications_5ftransfer_5ftx_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ibc_5fapplications_5ftransfer_5ftx_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "coin.pb.h"
#include "ibc_core_client.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ibc_5fapplications_5ftransfer_5ftx_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_5fapplications_5ftransfer_5ftx_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ibc_5fapplications_5ftransfer_5ftx_2eproto;
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {
class MsgTransfer;
struct MsgTransferDefaultTypeInternal;
extern MsgTransferDefaultTypeInternal _MsgTransfer_default_instance_;
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> ::ibc::applications::transfer::v1::MsgTransfer* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::MsgTransfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {

// ===================================================================

class MsgTransfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.MsgTransfer) */ {
 public:
  inline MsgTransfer() : MsgTransfer(nullptr) {}
  ~MsgTransfer() override;
  explicit constexpr MsgTransfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgTransfer(const MsgTransfer& from);
  MsgTransfer(MsgTransfer&& from) noexcept
    : MsgTransfer() {
    *this = ::std::move(from);
  }

  inline MsgTransfer& operator=(const MsgTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgTransfer& operator=(MsgTransfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgTransfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgTransfer* internal_default_instance() {
    return reinterpret_cast<const MsgTransfer*>(
               &_MsgTransfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgTransfer& a, MsgTransfer& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgTransfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgTransfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgTransfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgTransfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgTransfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MsgTransfer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgTransfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ibc.applications.transfer.v1.MsgTransfer";
  }
  protected:
  explicit MsgTransfer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcePortFieldNumber = 1,
    kSourceChannelFieldNumber = 2,
    kSenderFieldNumber = 4,
    kReceiverFieldNumber = 5,
    kTokenFieldNumber = 3,
    kTimeoutHeightFieldNumber = 6,
    kTimeoutTimestampFieldNumber = 7,
  };
  // string source_port = 1;
  void clear_source_port();
  const std::string& source_port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_port();
  PROTOBUF_NODISCARD std::string* release_source_port();
  void set_allocated_source_port(std::string* source_port);
  private:
  const std::string& _internal_source_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_port(const std::string& value);
  std::string* _internal_mutable_source_port();
  public:

  // string source_channel = 2;
  void clear_source_channel();
  const std::string& source_channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_channel();
  PROTOBUF_NODISCARD std::string* release_source_channel();
  void set_allocated_source_channel(std::string* source_channel);
  private:
  const std::string& _internal_source_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_channel(const std::string& value);
  std::string* _internal_mutable_source_channel();
  public:

  // string sender = 4;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // string receiver = 5;
  void clear_receiver();
  const std::string& receiver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver();
  PROTOBUF_NODISCARD std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // .cosmos.base.v1beta1.Coin token = 3;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::cosmos::base::v1beta1::Coin& token() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_token();
  ::cosmos::base::v1beta1::Coin* mutable_token();
  void set_allocated_token(::cosmos::base::v1beta1::Coin* token);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_token() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::cosmos::base::v1beta1::Coin* token);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_token();

  // .ibc.core.client.v1.Height timeout_height = 6;
  bool has_timeout_height() const;
  private:
  bool _internal_has_timeout_height() const;
  public:
  void clear_timeout_height();
  const ::ibc::core::client::v1::Height& timeout_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_timeout_height();
  ::ibc::core::client::v1::Height* mutable_timeout_height();
  void set_allocated_timeout_height(::ibc::core::client::v1::Height* timeout_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_timeout_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_timeout_height();
  public:
  void unsafe_arena_set_allocated_timeout_height(
      ::ibc::core::client::v1::Height* timeout_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_timeout_height();

  // uint64 timeout_timestamp = 7;
  void clear_timeout_timestamp();
  uint64_t timeout_timestamp() const;
  void set_timeout_timestamp(uint64_t value);
  private:
  uint64_t _internal_timeout_timestamp() const;
  void _internal_set_timeout_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.MsgTransfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_channel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::cosmos::base::v1beta1::Coin* token_;
  ::ibc::core::client::v1::Height* timeout_height_;
  uint64_t timeout_timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ibc_5fapplications_5ftransfer_5ftx_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgTransfer

// string source_port = 1;
inline void MsgTransfer::clear_source_port() {
  source_port_.ClearToEmpty();
}
inline const std::string& MsgTransfer::source_port() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.MsgTransfer.source_port)
  return _internal_source_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgTransfer::set_source_port(ArgT0&& arg0, ArgT... args) {
 
 source_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.MsgTransfer.source_port)
}
inline std::string* MsgTransfer::mutable_source_port() {
  std::string* _s = _internal_mutable_source_port();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.MsgTransfer.source_port)
  return _s;
}
inline const std::string& MsgTransfer::_internal_source_port() const {
  return source_port_.Get();
}
inline void MsgTransfer::_internal_set_source_port(const std::string& value) {
  
  source_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgTransfer::_internal_mutable_source_port() {
  
  return source_port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgTransfer::release_source_port() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.MsgTransfer.source_port)
  return source_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgTransfer::set_allocated_source_port(std::string* source_port) {
  if (source_port != nullptr) {
    
  } else {
    
  }
  source_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_port,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_port_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_port_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.MsgTransfer.source_port)
}

// string source_channel = 2;
inline void MsgTransfer::clear_source_channel() {
  source_channel_.ClearToEmpty();
}
inline const std::string& MsgTransfer::source_channel() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.MsgTransfer.source_channel)
  return _internal_source_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgTransfer::set_source_channel(ArgT0&& arg0, ArgT... args) {
 
 source_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.MsgTransfer.source_channel)
}
inline std::string* MsgTransfer::mutable_source_channel() {
  std::string* _s = _internal_mutable_source_channel();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.MsgTransfer.source_channel)
  return _s;
}
inline const std::string& MsgTransfer::_internal_source_channel() const {
  return source_channel_.Get();
}
inline void MsgTransfer::_internal_set_source_channel(const std::string& value) {
  
  source_channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgTransfer::_internal_mutable_source_channel() {
  
  return source_channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgTransfer::release_source_channel() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.MsgTransfer.source_channel)
  return source_channel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgTransfer::set_allocated_source_channel(std::string* source_channel) {
  if (source_channel != nullptr) {
    
  } else {
    
  }
  source_channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_channel,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_channel_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    source_channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.MsgTransfer.source_channel)
}

// .cosmos.base.v1beta1.Coin token = 3;
inline bool MsgTransfer::_internal_has_token() const {
  return this != internal_default_instance() && token_ != nullptr;
}
inline bool MsgTransfer::has_token() const {
  return _internal_has_token();
}
inline const ::cosmos::base::v1beta1::Coin& MsgTransfer::_internal_token() const {
  const ::cosmos::base::v1beta1::Coin* p = token_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgTransfer::token() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.MsgTransfer.token)
  return _internal_token();
}
inline void MsgTransfer::unsafe_arena_set_allocated_token(
    ::cosmos::base::v1beta1::Coin* token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  token_ = token;
  if (token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.transfer.v1.MsgTransfer.token)
}
inline ::cosmos::base::v1beta1::Coin* MsgTransfer::release_token() {
  
  ::cosmos::base::v1beta1::Coin* temp = token_;
  token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgTransfer::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.MsgTransfer.token)
  
  ::cosmos::base::v1beta1::Coin* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgTransfer::_internal_mutable_token() {
  
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    token_ = p;
  }
  return token_;
}
inline ::cosmos::base::v1beta1::Coin* MsgTransfer::mutable_token() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.MsgTransfer.token)
  return _msg;
}
inline void MsgTransfer::set_allocated_token(::cosmos::base::v1beta1::Coin* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token));
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.MsgTransfer.token)
}

// string sender = 4;
inline void MsgTransfer::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& MsgTransfer::sender() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.MsgTransfer.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgTransfer::set_sender(ArgT0&& arg0, ArgT... args) {
 
 sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.MsgTransfer.sender)
}
inline std::string* MsgTransfer::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.MsgTransfer.sender)
  return _s;
}
inline const std::string& MsgTransfer::_internal_sender() const {
  return sender_.Get();
}
inline void MsgTransfer::_internal_set_sender(const std::string& value) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgTransfer::_internal_mutable_sender() {
  
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgTransfer::release_sender() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.MsgTransfer.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgTransfer::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sender_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.MsgTransfer.sender)
}

// string receiver = 5;
inline void MsgTransfer::clear_receiver() {
  receiver_.ClearToEmpty();
}
inline const std::string& MsgTransfer::receiver() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.MsgTransfer.receiver)
  return _internal_receiver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgTransfer::set_receiver(ArgT0&& arg0, ArgT... args) {
 
 receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.MsgTransfer.receiver)
}
inline std::string* MsgTransfer::mutable_receiver() {
  std::string* _s = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.MsgTransfer.receiver)
  return _s;
}
inline const std::string& MsgTransfer::_internal_receiver() const {
  return receiver_.Get();
}
inline void MsgTransfer::_internal_set_receiver(const std::string& value) {
  
  receiver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgTransfer::_internal_mutable_receiver() {
  
  return receiver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgTransfer::release_receiver() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.MsgTransfer.receiver)
  return receiver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgTransfer::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (receiver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.MsgTransfer.receiver)
}

// .ibc.core.client.v1.Height timeout_height = 6;
inline bool MsgTransfer::_internal_has_timeout_height() const {
  return this != internal_default_instance() && timeout_height_ != nullptr;
}
inline bool MsgTransfer::has_timeout_height() const {
  return _internal_has_timeout_height();
}
inline const ::ibc::core::client::v1::Height& MsgTransfer::_internal_timeout_height() const {
  const ::ibc::core::client::v1::Height* p = timeout_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& MsgTransfer::timeout_height() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.MsgTransfer.timeout_height)
  return _internal_timeout_height();
}
inline void MsgTransfer::unsafe_arena_set_allocated_timeout_height(
    ::ibc::core::client::v1::Height* timeout_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_height_);
  }
  timeout_height_ = timeout_height;
  if (timeout_height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.transfer.v1.MsgTransfer.timeout_height)
}
inline ::ibc::core::client::v1::Height* MsgTransfer::release_timeout_height() {
  
  ::ibc::core::client::v1::Height* temp = timeout_height_;
  timeout_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgTransfer::unsafe_arena_release_timeout_height() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.MsgTransfer.timeout_height)
  
  ::ibc::core::client::v1::Height* temp = timeout_height_;
  timeout_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgTransfer::_internal_mutable_timeout_height() {
  
  if (timeout_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    timeout_height_ = p;
  }
  return timeout_height_;
}
inline ::ibc::core::client::v1::Height* MsgTransfer::mutable_timeout_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_timeout_height();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.MsgTransfer.timeout_height)
  return _msg;
}
inline void MsgTransfer::set_allocated_timeout_height(::ibc::core::client::v1::Height* timeout_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_height_);
  }
  if (timeout_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_height));
    if (message_arena != submessage_arena) {
      timeout_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout_height, submessage_arena);
    }
    
  } else {
    
  }
  timeout_height_ = timeout_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.MsgTransfer.timeout_height)
}

// uint64 timeout_timestamp = 7;
inline void MsgTransfer::clear_timeout_timestamp() {
  timeout_timestamp_ = uint64_t{0u};
}
inline uint64_t MsgTransfer::_internal_timeout_timestamp() const {
  return timeout_timestamp_;
}
inline uint64_t MsgTransfer::timeout_timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.MsgTransfer.timeout_timestamp)
  return _internal_timeout_timestamp();
}
inline void MsgTransfer::_internal_set_timeout_timestamp(uint64_t value) {
  
  timeout_timestamp_ = value;
}
inline void MsgTransfer::set_timeout_timestamp(uint64_t value) {
  _internal_set_timeout_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.MsgTransfer.timeout_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ibc_5fapplications_5ftransfer_5ftx_2eproto
