syntax = "proto3";

package TW.Binance.Proto;
option java_package = "wallet.core.jni.proto";

import "Common.proto";

// Transaction structure, used internally
message Transaction {
    repeated bytes msgs = 1;       // array of size 1, containing the transaction message, which are one of the transaction type below
    repeated bytes signatures = 2; // array of size 1, containing the standard signature structure of the transaction sender
    string memo = 3;               // a short sentence of remark for the transaction, only for `Transfer` transactions.
    int64 source = 4;              // an identifier for tools triggering this transaction, set to zero if unwilling to disclose.
    bytes data = 5;                // reserved for future use
}

// Signature structure, used internally
message Signature {
    bytes pub_key = 1;         // public key bytes of the signer address
    bytes signature = 2;       // signature bytes, please check chain access section for signature generation
    int64 account_number = 3;  // another identifier of signer, which can be read from chain by account REST API or RPC
    int64 sequence = 4;        // sequence number for the next transaction
}

// Message for Trade order
message TradeOrder {
    bytes sender = 1;       // originating address
    string id = 2;          // order id, optional
    string symbol = 3;      // symbol for trading pair in full name of the tokens
    int64 ordertype = 4;    // only accept 2 for now, meaning limit order
    int64 side = 5;         // 1 for buy and 2 for sell
    int64 price = 6;        // price of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
    int64 quantity = 7;     // quantity of the order, which is the real price multiplied by 1e8 (10^8) and rounded to integer
    int64 timeinforce = 8;  // 1 for Good Till Expire(GTE) order and 3 for Immediate Or Cancel (IOC)
}

// Message for CancelTrade order
message CancelTradeOrder {
    bytes sender = 1;  // originating address
    string symbol = 2; // symbol for trading pair in full name of the tokens
    string refid = 3;  // order id to cancel
}

// Message for Send order
message SendOrder {
    // A symbol-amount pair.  Could be moved out of SendOrder; kept here for backward compatibility.
    message Token {
        string denom = 1;
        int64 amount = 2;
    }
    message Input {
        bytes address = 1;
        repeated Token coins = 2;
    }
    message Output {
        bytes address = 1;
        repeated Token coins = 2;
    }
    repeated Input inputs = 1;
    repeated Output outputs = 2;
}

// Message for TokenIssue order
message TokenIssueOrder {
    bytes from = 1;    // owner address
    string name = 2;   // token name
    string symbol = 3; // token symbol, in full name with "-" suffix
    int64 total_supply = 4; // total supply
    bool mintable = 5; // mintable
}

// Message for TokenMint order
message TokenMintOrder {
    bytes from = 1;    // owner address
    string symbol = 2; // token symbol, in full name with "-" suffix
    int64 amount = 3;  // amount to mint
}

// Message for TokenBurn order
message TokenBurnOrder {
    bytes from = 1;    // owner address
    string symbol = 2; // token symbol, in full name with "-" suffix
    int64 amount = 3;  // amount to burn
}

// Message for TokenFreeze order
message TokenFreezeOrder {
    bytes from = 1;    // owner address
    string symbol = 2; // token symbol, in full name with "-" suffix
    int64 amount = 3;  // amount of token to freeze
}

// Message for TokenUnfreeze order
message TokenUnfreezeOrder {
    bytes from = 1;    // owner address
    string symbol = 2; // token symbol, in full name with "-" suffix
    int64 amount = 3;  // amount of token to unfreeze
}

// Message for HashTimeLock order
message HTLTOrder {
    bytes from = 1;    // signer address
    bytes to = 2;    // recipient address
    string recipient_other_chain = 3;
    string sender_other_chain = 4;
    bytes random_number_hash = 5; //hash of a random number and timestamp, based on SHA256
    int64 timestamp = 6;
    repeated SendOrder.Token amount = 7;
    string expected_income = 8; // expected gained token on the other chain
    int64 height_span = 9;
    bool cross_chain = 10;
}

// Message for Deposit HTLT order
message DepositHTLTOrder {
    bytes from = 1;    // signer address
    repeated SendOrder.Token amount = 2;
    bytes swap_id = 3;
}

// Message for Claim HTLT order
message ClaimHTLOrder {
    bytes from = 1;    // signer address
    bytes swap_id = 2;
    bytes random_number = 3;
}

// Message for Refund HTLT order
message RefundHTLTOrder {
    bytes from = 1;    // signer address
    bytes swap_id = 2;
}

message TransferOut {
    bytes from = 1;
    bytes to = 2;
	SendOrder.Token amount = 3;
	int64 expire_time = 4;
}

message SideChainDelegate {
    bytes delegator_addr = 1;
    bytes validator_addr = 2;
    SendOrder.Token delegation = 3;
	string chain_id = 4;
}

message SideChainRedelegate {
    bytes delegator_addr = 1;
    bytes validator_src_addr = 2;
    bytes validator_dst_addr = 3;
    SendOrder.Token amount = 4;
    string chain_id = 5;
}

message SideChainUndelegate {
    bytes delegator_addr = 1;
    bytes validator_addr = 2;
    SendOrder.Token amount = 3;
	string chain_id = 4;
}

// Message for TimeLock order
message TimeLockOrder {
    bytes from_address = 1; // owner address
    string description = 2;
    // Array of symbol/amount pairs. see SDK https://github.com/binance-chain/javascript-sdk/blob/master/docs/api-docs/classes/tokenmanagement.md#timelock
    repeated SendOrder.Token amount = 3;
    int64 lock_time = 4;
}

// Message for TimeRelock order
message TimeRelockOrder {
    bytes from_address = 1; // owner address
    int64 id = 2; // order ID
    string description = 3;
    // Array of symbol/amount pairs.
    repeated SendOrder.Token amount = 4;
    int64 lock_time = 5;
}

// Message for TimeUnlock order
message TimeUnlockOrder {
    bytes from_address = 1; // owner address
    int64 id = 2; // order ID
}

// Input data necessary to create a signed transaction.
message SigningInput {
    // Chain ID
    string chain_id = 1;

    // Source account number
    int64 account_number = 2;

    // Sequence number (account specific)
    int64 sequence = 3;

    int64 source = 4;

    // Optional memo
    string memo = 5;

    // The secret private key used for signing (32 bytes).
    bytes private_key = 6;

    // Payload message
    oneof order_oneof {
        TradeOrder trade_order = 8;
        CancelTradeOrder cancel_trade_order = 9;
        SendOrder send_order = 10;
        TokenFreezeOrder freeze_order = 11;
        TokenUnfreezeOrder unfreeze_order = 12;
        HTLTOrder htlt_order = 13;
        DepositHTLTOrder depositHTLT_order = 14;
        ClaimHTLOrder claimHTLT_order = 15;
        RefundHTLTOrder refundHTLT_order = 16;
        TokenIssueOrder issue_order = 17;
        TokenMintOrder mint_order = 18;
        TokenBurnOrder burn_order = 19;
        TransferOut transfer_out_order = 20;
        SideChainDelegate side_delegate_order = 21;
        SideChainRedelegate side_redelegate_order = 22;
        SideChainUndelegate side_undelegate_order = 23;
        TimeLockOrder time_lock_order = 24;
        TimeRelockOrder time_relock_order = 25;
        TimeUnlockOrder time_unlock_order = 26;
    }
}

// Result containing the signed and encoded transaction.
message SigningOutput {
    // Signed and encoded transaction bytes.
    bytes encoded = 1;

    // OK (=0) or other codes in case of error
    Common.Proto.SigningError error = 2;

    // error description in case of error
    string error_message = 3;
}
