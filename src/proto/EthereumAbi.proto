syntax = "proto3";

package TW.EthereumAbi.Proto;
option java_package = "wallet.core.jni.proto";

import "Common.proto";

// ABI type parameters excluding values.

// Indicates a boolean type.
message BoolType {}

// Generic number type for all other bit sizes, like UInt24, 40, 48, ... 248.
message NumberNType {
    uint32 bits = 1;
}

// Indicates a string type.
message StringType {}

// Indicates an address type.
message AddressType {}

// Indicates an array type with an inner `element_type`.
message ArrayType {
    ParamType element_type = 1;
}

// Indicates a fixed-size array type with an inner `element_type`.
message FixedArrayType {
    uint64 size = 1;
    ParamType element_type = 2;
}

// Indicates a byte array type.
message ByteArrayType {}

// Indicates a fixed-size byte array type.
message ByteArrayFixType {
    uint64 size = 1;
}

// Indicates a tuple with inner type parameters.
message TupleType {
    repeated NamedParamType params = 1;
}

message ParamType {
    oneof param {
        BoolType boolean = 1;
        NumberNType number_int = 2;
        NumberNType number_uint = 3;
        // Nested values. Gap in field numbering is intentional.
        StringType string_param = 7;
        AddressType address = 8;
        ByteArrayType byte_array = 9;
        ByteArrayFixType byte_array_fix = 10;

        // Nested values. Gap in field numbering is intentional.
        ArrayType array = 14;
        FixedArrayType fixed_array = 15;

        // Nested values. Gap in field numbering is intentional.
        TupleType tuple = 19;
    }
}

// ABI parameters including values.

// Generic number parameter for all other bit sizes, like UInt24, 40, 48, ... 248.
message NumberNParam {
    // Count of bits of the number.
    // 0 < bits <= 256, bits % 8 == 0
    uint32 bits = 1;

    // Serialized big endian.
    bytes value = 2;
}

// A byte array of arbitrary size.
message ArrayParam {
    repeated ParamValue values = 1;
}

// A tuple with various parameters similar to a structure.
message TupleParam {
    repeated NamedParam params = 1;
}

// An enumeration of possible parameters.
message ParamValue {
    oneof param {
        // Simple values.
        bool boolean = 1;
        NumberNParam number_int = 2;
        NumberNParam number_uint = 3;
        // Nested values. Gap in field numbering is intentional.
        string string_value = 7;
        string address = 8;
        bytes byte_array = 9;
        bytes byte_array_fix = 10;

        // Nested values. Gap in field numbering is intentional.
        ArrayParam array = 14;
        ArrayParam fixed_array = 15;

        // Nested values. Gap in field numbering is intentional.
        TupleParam tuple = 19;
    }
}

// A named parameter.
message NamedParam {
    // Name of the parameter.
    string name = 1;

    // Value of the parameter.
    ParamValue value = 2;
}

// A named type parameter.
message NamedParamType {
    // Name of the parameter.
    string name = 1;

    // Type of the parameter.
    ParamType param = 2;
}

//// TWEthereumAbiDecodeContractCall

// Decode a contract call (function input) according to the given ABI json.
message ContractCallDecodingInput {
    // An encoded smart contract call with a prefixed function signature (4 bytes).
    bytes encoded = 1;

    // A smart contract ABI in JSON.
    // Each ABI function must be mapped to a short signature.
    // Expected to be a set of functions mapped to corresponding short signatures.
    // Example:
    // ```
    // {
    //     "1896f70a": {
    //         "name": "setResolver",
    //         "inputs": [...],
    //         ...
    //     },
    //     "ac9650d8": {
    //         "name": "multicall",
    //         "inputs": [...],
    //         ...
    //     }
    // }
    // ```
    string smart_contract_abi_json = 2;
}

message ContractCallDecodingOutput {
    // Human readable json format, according to the input `ContractCallDecodingInput::smart_contract_abi_json`.
    string decoded_json = 1;

    // Decoded parameters.
    repeated NamedParam params = 2;

    // error code, 0 is ok, other codes will be treated as errors
    Common.Proto.SigningError error = 3;

    // error code description
    string error_message = 4;
}

//// TWEthereumAbiDecodeParams

message AbiParams {
    repeated NamedParamType params = 1;
}

// Decode a function input or output data according to the given ABI json.
message ParamsDecodingInput {
    // An encoded ABI.
    bytes encoded = 1;

    oneof abi {
        // A set of ABI parameters in JSON.
        // Expected to be a JSON array at the entry level.
        // Example:
        // ```
        // [
        //     {
        //         "name": "_to',
        //         "type": "address"
        //     },
        //     {
        //         "name": "_value",
        //         "type": "uint256"
        //     }
        // ]
        // ```
        string abi_json = 2;

        // A set of ABI type parameters.
        AbiParams abi_params = 3;
    }
}

message ParamsDecodingOutput {
    // Decoded parameters.
    repeated NamedParam params = 1;

    // error code, 0 is ok, other codes will be treated as errors
    Common.Proto.SigningError error = 2;

    // error code description
    string error_message = 3;
}

//// TWEthereumAbiDecodeValue

// Decode an Eth ABI value.
message ValueDecodingInput {
    // An encoded value to be decoded.
    bytes encoded = 1;

    // A type of the parameter.
    string param_type = 2;
}

message ValueDecodingOutput {
    // Decoded parameters.
    ParamValue param = 1;

    // error code, 0 is ok, other codes will be treated as errors
    Common.Proto.SigningError error = 2;

    // error code description
    string error_message = 3;
}

//// TWEthereumAbiEncodeFunction

// Encode a function call to Eth ABI binary.
message FunctionEncodingInput {
    string function_name = 1;

    // Parameters to be encoded.
    repeated ParamValue params = 2;
}

message FunctionEncodingOutput {
    // The function type signature.
    // Example: "baz(int32,uint256)"
    string function_type = 1;

    // An encoded smart contract call with a prefixed function signature (4 bytes).
    bytes encoded = 2;
}
