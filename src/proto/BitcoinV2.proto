syntax = "proto3";

package TW.BitcoinV2.Proto;
option java_package = "wallet.core.jni.proto";

import "Common.proto";
import "Utxo.proto";

message SigningInput {
    // The protocol version, is currently expected to be 1 or 2 (BIP68)
    int32 version = 1;

	// Only required if the `sign` method is called.
	bytes private_key = 2;

    // Block height or timestamp indicating at what point transactions can be
    // included in a block.
	Utxo.Proto.LockTime lock_time = 3;

	repeated Input inputs = 5;

    repeated Output outputs = 6;

	uint64 sat_vb = 7;

	// The change output to be added (return to sender).
	// The `amount` can be left at 0.
    Output change_output = 6;

    // Explicility disable change output creation.
    bool disable_change_output = 7;
}

message Input {
	bytes txid = 1;

	uint32 vout = 2;

	uint64 amount = 3;

	Utxo.Proto.SighashType sighash_type = 4;

	oneof to_recipient {
		Builder builder = 5;
		ScriptWitness custom = 6;
	}

	bool one_prevout = 7;

	message Builder {
		oneof variant {
			// Pay-to-Script-Hash, specify the hash.
			bytes p2sh = 1;
			// Pay-to-Public-Key-Hash
			bytes p2pkh = 2;
			// Pay-to-Witness-Script-Hash, specify the hash.
			bytes p2wsh = 3;
			// Pay-to-Public-Key-Hash
			bytes p2wpkh = 6;
			// Pay-to-Taproot-key-path (balance transfers), specify the public key.
			bytes p2tr_key_path = 7;
			// Pay-to-Taproot-script-path (complex transfers)
			TaprootScriptPath p2tr_script_path = 8;
			Brc20Inscription brc20_inscribe = 9;
		}
	}

	message ScriptWitness {
		bytes script_sig = 1;
		repeated bytes witness_items = 2;
	}

	message TaprootScriptPath {
		bytes payload = 1;
		bytes control_block = 2;
	}

	message Brc20Inscription {
		// TODO: This is dangeours, could be misinterpreted.
		bytes inscribe_to = 1;
		string ticker = 2;
		uint64 transfer_amount = 3;
		bytes control_block = 4;
	}
}

message Output {
	uint64 amount = 1;

	oneof to_recipient {
		Builder builder = 2;
		bytes script_pubkey = 3;
		bytes from_address = 4;
	}

	message Builder {
		oneof variant {
			// Pay-to-Script-Hash, specify the hash.
			bytes p2sh = 1;
			// Pay-to-Public-Key-Hash
			ToPublicKeyOrHash p2pkh = 2;
			// Pay-to-Witness-Script-Hash, specify the hash.
			bytes p2wsh = 3;
			// Pay-to-Public-Key-Hash
			ToPublicKeyOrHash p2wpkh = 4;
			// Pay-to-Taproot-key-path (balance transfers), specify the public key.
			bytes p2tr_key_path = 5;
			// Pay-to-Taproot-script-path (complex transfers)
			TaprootScriptPath p2tr_script_path = 6;
			Brc20Inscription brc20_inscribe = 7;
		}
	}

	message TaprootScriptPath {
		bytes public_key = 1;
		bytes node_hash = 2;
	}

	message Brc20Inscription {
		// TODO: This is dangeours, could be misinterpreted.
		bytes inscribe_to = 1;
		string ticker = 2;
		uint64 transfer_amount = 3;
	}
}

message ToPublicKeyOrHash {
	oneof to_address {
		bytes pubkey = 1;
		bytes hash = 2;
	}
}

message PreSigningOutput {
	// TODO
	uint32 error = 1;

    /// SighashMethodSighashes to be signed; ECDSA for legacy and Segwit, Schnorr for Taproot.
    repeated Utxo.Proto.Sighash sighashes = 2;

	repeated Utxo.Proto.TxIn utxo_inputs = 3;

	repeated TxOut utxo_outputs = 4;

	// The output of a transaction.
	message TxOut {
		// The value of the output (amount).
		uint64 value = 1;
		// The spending condition of the output.
		bytes script_pubkey = 2;

		bytes control_block = 3;
	}
}

message SigningOutput {
	Transaction transaction = 1;

	// The encoded transaction that submitted to the network.
	bytes encoded = 2;

	bytes transaction_id = 3;

    uint32 error = 4;

	uint64 fee = 5;
}

message Transaction {
    // The protocol version, is currently expected to be 1 or 2 (BIP68)
    int32 version = 1;

    Utxo.Proto.LockTime lock_time = 2;

	// The transaction inputs.
	repeated TransactionInput inputs = 3;
	
	// The transaction outputs.
	repeated TransactionOutput outputs = 4;
}

message TransactionInput {
	// The referenced input by transaction hash.
	bytes txid = 1;

	// The referenced input by transaction index.
	uint32 vout = 3;

	uint32 sequence = 4;

	// The script for claiming the input (non-Segwit/non-Taproot).
	bytes script_sig = 5;

	// The script for claiming the input (Segit/Taproot).
	repeated bytes witness_items = 6;
}

message TransactionOutput {
	// Public key or hash.
	bytes recipient = 1;

	// The condition for claiming the output.
	bytes script_pubkey = 2;

	// The amount sent.
	uint64 amount = 3;

	// In case of P2TR script-path (complex scripts), this is the control block
	// required for claiming.
	// TODO: Required?
	bytes control_block = 4;
}
