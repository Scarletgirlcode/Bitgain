syntax = "proto3";

package TW.NULS.Proto;
option java_package = "wallet.core.jni.proto";

import "Common.proto";

message TransactionCoinFrom {
    string from_address = 1;
    uint32 assets_chainid = 2;
    uint32 assets_id = 3;
    //tranaction out amount (256-bit number)
    bytes id_amount = 4;
    //8 bytes
    bytes nonce = 5;
    //lock status: 1 locked; 0 unlocked
    uint32 locked = 6;
}

message TransactionCoinTo {
    string to_address = 1;
    uint32 assets_chainid = 2;
    uint32 assets_id = 3;
    // tranaction amount (256-bit number)
    bytes id_amount = 4;
    uint32 lock_time = 5;
}

message Signature {
    uint32 pkey_len = 1;
    bytes public_key = 2;
    uint32 sig_len = 3;
    bytes signature = 4;
}

message Transaction {
    uint32  type = 1;
    uint32  timestamp = 2;
    string  remark = 3;
    bytes   tx_data = 4;
    //CoinFrom
    repeated TransactionCoinFrom input = 5;
    //CoinTo
    repeated TransactionCoinTo output = 6;

    Signature tx_sigs = 7;
    uint32 hash = 8;
}

// Input data necessary to create a signed order.
message SigningInput {
    bytes private_key = 1;
    string from = 2;
    string to = 3;
    bytes  amount = 4;
    uint32 chain_id = 5;
    uint32 idassets_id = 6;
    //The last 8 bytes of latest transaction hash, nonce of the asset on chain.
    bytes nonce = 7;
    string remark = 8;
    // Account balance of the asset to be transferred.
    bytes balance = 9;
    // time, accurate to the second
    uint32 timestamp = 10;
    // external address paying fee, required for token transfer, optional for NULS transfer, depending on if an external fee payer is provided. If provided, it will be the fee paying address.
    string fee_payer = 11;
    // fee payer address nonce, required for token transfer, optional for NULS transfer, depending on if fee_payer is provided.
    bytes fee_payer_nonce = 12;
    // fee payer address private key, required for token transfer, optional for NULS transfer, depending on if fee_payer is provided.
    bytes fee_payer_private_key = 13;
    // fee payer NULS balance, it is required for token transfer. optional for NULS transfer, depending on if fee_payer is provided.
    bytes fee_payer_balance = 14;
}

message SigningOutput {
    bytes encoded = 1;

    // error code, 0 is ok, other codes will be treated as errors
    Common.Proto.SigningError error = 2;

    // error code description
    string error_message = 3;
}
