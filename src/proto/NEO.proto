syntax = "proto3";

package TW.NEO.Proto;
option java_package = "wallet.core.jni.proto";

import "Common.proto";

message TransactionInput {
    bytes prev_hash = 1;
    fixed32 prev_index = 2;

    // unspent value of UTXO
    int64 value = 3;

    string asset_id = 4;
}

message TransactionOutput {
    string asset_id = 1;
    sint64 amount = 2;
    string to_address = 3;
    string change_address = 4;
}

// Transaction
message Transaction {
    // nep5 token transfer transaction
    message Nep5Transfer {
        string asset_id = 1;
        string from = 2;
        string to = 3;

        // Amount to send (256-bit number)
        bytes amount = 4;

        // determine if putting THROWIFNOT & RET instructions
        bool script_with_ret = 5;
    }

    // Generic invocation transaction
    message InvocationGeneric {
        // gas to use
        uint64 gas = 1;

        // Contract call payload data
        bytes script = 2;
    }

    oneof transaction_oneof {
        Nep5Transfer nep5_transfer = 1;
        InvocationGeneric invocation_generic = 2;
    }
}

// Input data necessary to create a signed transaction.
message SigningInput {
    repeated TransactionInput inputs = 1;
    repeated TransactionOutput outputs = 2;
    bytes private_key = 3;
    int64 fee = 4;
    string gas_asset_id = 5;
    string gas_change_address = 6;
    TransactionPlan plan = 7;
    Transaction transaction = 8;
}

// Transaction signing output.
message SigningOutput {
    // Signed and encoded transaction bytes.
    bytes encoded = 1;

    // Optional error
    Common.Proto.SigningError error = 2;

    // error code description
    string error_message = 3;
}

// Describes a preliminary transaction output plan.
message TransactionOutputPlan {
    // Amount to be received at the other end.
    int64 amount = 1;

    // Maximum available amount.
    int64 available_amount = 2;

    int64 change = 3;
    string asset_id = 4;
    string to_address = 5;
    string change_address = 6;
};

message TransactionAttributePlan {
    int32 usage = 1;
    bytes data = 2;
}

// Describes a preliminary transaction plan.
message TransactionPlan {
    // Used assets
    repeated TransactionOutputPlan outputs = 1;

    // Selected unspent transaction outputs.
    repeated TransactionInput inputs = 2;

    // GAS used
    int64 fee = 3;

    // Optional error
    Common.Proto.SigningError error = 4;

    // Attribute
    repeated TransactionAttributePlan attributes = 5;
};