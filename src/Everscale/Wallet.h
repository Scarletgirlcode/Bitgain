#pragma once

#include <boost/integer.hpp>
#include <utility>

#include "../PublicKey.h"

#include "Address.h"
#include "Cell.h"
#include "CellBuilder.h"
#include "CellSlice.h"

const uint32_t WALLET_ID = 0x4BA92D8A;

namespace TW::Everscale {

class Wallet {
public:
    struct Gift {
        bool bounce;
        uint64_t amount;
        Address::MsgAddressInt destination;
        uint8_t flags;
    };

    // WalletV3 contract https://github.com/tonlabs/ton-1/blob/master/crypto/smartcont/wallet3-code.fc
    static constexpr const uint8_t code[] = {
        0xB5, 0xEE, 0x9C, 0x72, 0x01, 0x01, 0x01, 0x01, 0x00, 0x71, 0x00,
        0x00, 0xDE, 0xFF, 0x00, 0x20, 0xDD, 0x20, 0x82, 0x01, 0x4C, 0x97,
        0xBA, 0x21, 0x82, 0x01, 0x33, 0x9C, 0xBA, 0xB1, 0x9F, 0x71, 0xB0,
        0xED, 0x44, 0xD0, 0xD3, 0x1F, 0xD3, 0x1F, 0x31, 0xD7, 0x0B, 0xFF,
        0xE3, 0x04, 0xE0, 0xA4, 0xF2, 0x60, 0x83, 0x08, 0xD7, 0x18, 0x20,
        0xD3, 0x1F, 0xD3, 0x1F, 0xD3, 0x1F, 0xF8, 0x23, 0x13, 0xBB, 0xF2,
        0x63, 0xED, 0x44, 0xD0, 0xD3, 0x1F, 0xD3, 0x1F, 0xD3, 0xFF, 0xD1,
        0x51, 0x32, 0xBA, 0xF2, 0xA1, 0x51, 0x44, 0xBA, 0xF2, 0xA2, 0x04,
        0xF9, 0x01, 0x54, 0x10, 0x55, 0xF9, 0x10, 0xF2, 0xA3, 0xF8, 0x00,
        0x93, 0x20, 0xD7, 0x4A, 0x96, 0xD3, 0x07, 0xD4, 0x02, 0xFB, 0x00,
        0xE8, 0xD1, 0x01, 0xA4, 0xC8, 0xCB, 0x1F, 0xCB, 0x1F, 0xCB, 0xFF,
        0xC9, 0xED, 0x54,
    };
};

class StateInit {
    Cell::Ref _code;
    Cell::Ref _data;
public:
    explicit StateInit(Cell::Ref code, Cell::Ref data) : _code(std::move(code)), _data(std::move(data)) {}

    [[nodiscard]] CellBuilder writeTo() const;
};

class InitData {
    uint32_t _seqno;
    uint32_t _walletId;
    PublicKey _publicKey;
public:
    explicit InitData(PublicKey publicKey) : _seqno(0), _walletId(WALLET_ID), _publicKey(std::move(publicKey)) {}
    explicit InitData(CellSlice cs) : _seqno(cs.getNextU32()), _walletId(cs.getNextU32()), _publicKey(PublicKey(cs.getNextBytes(32), TWPublicKeyTypeED25519)) {}

    [[nodiscard]] CellBuilder writeTo() const;
    [[nodiscard]] StateInit makeStateInit() const;
    [[nodiscard]] Address::MsgAddressInt computeAddr(int8_t workchainId) const;
    [[nodiscard]] CellBuilder makeTransferPayload(uint32_t expireAt, const Wallet::Gift& gift) const;
};

} // namespace TW::Everscale
